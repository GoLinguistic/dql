/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function() {
  var o = function(k, v, o, l) {
      for (o = o || {}, l = k.length; l--; o[k[l]] = v);
      return o;
    },
    $V0 = [1, 5],
    $V1 = [1, 17],
    $V2 = [1, 11],
    $V3 = [1, 16],
    $V4 = [1, 22],
    $V5 = [1, 25],
    $V6 = [1, 24],
    $V7 = [27, 29],
    $V8 = [1, 4, 15, 17, 44, 49],
    $V9 = [4, 15, 44, 49],
    $Va = [1, 36],
    $Vb = [1, 49],
    $Vc = [1, 47],
    $Vd = [1, 46],
    $Ve = [1, 63],
    $Vf = [1, 62],
    $Vg = [1, 64],
    $Vh = [4, 15, 27, 29, 35, 43, 44, 49],
    $Vi = [2, 1],
    $Vj = [1, 71],
    $Vk = [1, 72],
    $Vl = [27, 29, 43, 44],
    $Vm = [1, 77],
    $Vn = [27, 35],
    $Vo = [1, 85],
    $Vp = [27, 29, 35, 43, 44],
    $Vq = [4, 8, 41];
  var parser = {
    trace: function trace() {},
    yy: {},
    symbols_: {
      error: 2,
      RawString: 3,
      STRING: 4,
      FieldRef: 5,
      '.': 6,
      RawLongString: 7,
      NUMBER: 8,
      LongString: 9,
      LONG_STRING: 10,
      Number: 11,
      Boolean: 12,
      BOOLEAN: 13,
      Join: 14,
      JOIN_OP: 15,
      Definition: 16,
      DEFINITION: 17,
      Root: 18,
      DocumentList: 19,
      Document: 20,
      Variables: 21,
      Block: 22,
      QueryCall: 23,
      Params: 24,
      ParamList: 25,
      Param: 26,
      ',': 27,
      '(': 28,
      ')': 29,
      Variable: 30,
      ArrayList: 31,
      ArrayElement: 32,
      Array: 33,
      '[': 34,
      ']': 35,
      VARIABLE: 36,
      $: 37,
      VariableList: 38,
      '!': 39,
      BuiltInFunc: 40,
      "'": 41,
      Equation: 42,
      OPERATOR: 43,
      '-': 44,
      EquationList: 45,
      Selectors: 46,
      '{': 47,
      BlockContent: 48,
      '}': 49,
      Content: 50,
      JoinOperation: 51,
      TableOperation: 52,
      ':': 53,
      $accept: 0,
      $end: 1
    },
    terminals_: {
      2: 'error',
      4: 'STRING',
      6: '.',
      8: 'NUMBER',
      10: 'LONG_STRING',
      13: 'BOOLEAN',
      15: 'JOIN_OP',
      17: 'DEFINITION',
      27: ',',
      28: '(',
      29: ')',
      34: '[',
      35: ']',
      37: '$',
      39: '!',
      41: "'",
      43: 'OPERATOR',
      44: '-',
      47: '{',
      49: '}',
      53: ':'
    },
    productions_: [
      0,
      [3, 1],
      [5, 3],
      [7, 1],
      [7, 1],
      [7, 2],
      [7, 2],
      [9, 1],
      [11, 1],
      [12, 1],
      [14, 1],
      [16, 1],
      [18, 1],
      [20, 4],
      [20, 3],
      [19, 2],
      [19, 1],
      [23, 2],
      [25, 0],
      [25, 1],
      [25, 3],
      [24, 3],
      [26, 1],
      [26, 1],
      [26, 1],
      [26, 1],
      [26, 1],
      [31, 0],
      [31, 1],
      [31, 3],
      [33, 3],
      [32, 1],
      [32, 1],
      [32, 1],
      [32, 1],
      [32, 1],
      [36, 2],
      [30, 1],
      [21, 2],
      [21, 3],
      [38, 1],
      [38, 2],
      [38, 3],
      [38, 4],
      [40, 4],
      [42, 1],
      [42, 1],
      [42, 1],
      [42, 1],
      [42, 1],
      [42, 1],
      [42, 1],
      [42, 1],
      [42, 3],
      [42, 3],
      [42, 3],
      [45, 1],
      [45, 3],
      [46, 3],
      [22, 3],
      [22, 2],
      [48, 1],
      [48, 2],
      [50, 1],
      [50, 1],
      [50, 1],
      [50, 4],
      [50, 3],
      [50, 3],
      [50, 3],
      [50, 3],
      [50, 3],
      [52, 3],
      [52, 2],
      [52, 3],
      [52, 4],
      [51, 4]
    ],
    performAction: function anonymous(
      yytext,
      yyleng,
      yylineno,
      yy,
      yystate /* action[1] */,
      $$ /* vstack */,
      _$ /* lstack */
    ) {
      /* this == yyval */

      var $0 = $$.length - 1;
      switch (yystate) {
        case 1:
          this.$ = { type: 'RAW', value: $$[$0] };
          break;
        case 2:
          this.$ = { type: 'FIELD_REF', value: $$[$0 - 2] + '.' + $$[$0] };
          break;
        case 3:
        case 4:
        case 10:
        case 11:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 63:
        case 64:
          this.$ = $$[$0];
          break;
        case 5:
        case 6:
          this.$ = $$[$0 - 1] + ' ' + $$[$0];
          break;
        case 7:
          this.$ = {
            type: 'LONG_STRING',
            value: $$[$0].substr(1, $$[$0].length - 2)
          };
          break;
        case 8:
          this.$ = { type: 'NUMBER', value: Number($$[$0]) };
          break;
        case 9:
          this.$ = { type: 'BOOLEAN', value: $$[$0] === 'true' };
          break;
        case 12:
          return (this.$ = $$[$0]);
          break;
        case 13:
          this.$ = {
            type: $$[$0 - 3].toUpperCase(),
            name: $$[$0 - 2],
            variables: $$[$0 - 1],
            nodes: $$[$0]
          };
          break;
        case 14:
          this.$ = {
            type: $$[$0 - 2].toUpperCase(),
            name: $$[$0 - 1],
            variables: [],
            nodes: $$[$0]
          };
          break;
        case 15:
        case 62:
          this.$ = $$[$0 - 1];
          $$[$0 - 1].push($$[$0]);
          break;
        case 16:
        case 19:
        case 28:
        case 56:
        case 61:
          this.$ = [$$[$0]];
          break;
        case 17:
          this.$ = { type: 'QUERY_CALL', name: $$[$0 - 1], params: $$[$0] };
          break;
        case 18:
        case 27:
          this.$ = [''];
          break;
        case 20:
        case 29:
        case 57:
          this.$ = $$[$0 - 2];
          $$[$0 - 2].push($$[$0]);
          break;
        case 21:
        case 39:
        case 55:
        case 58:
        case 59:
          this.$ = $$[$0 - 1];
          break;
        case 30:
          this.$ = { type: 'ARRAY', value: $$[$0 - 1] };
          break;
        case 37:
          this.$ = { type: 'VARIABLE', value: $$[$0] };
          break;
        case 38:
        case 60:
          this.$ = [];
          break;
        case 40:
          this.$ = [{ required: false, name: $$[$0] }];
          break;
        case 41:
          this.$ = [{ required: true, name: $$[$0 - 1] }];
          break;
        case 42:
          this.$ = $$[$0 - 2];
          $$[$0 - 2].push({ required: false, name: $$[$0] });
          break;
        case 43:
          this.$ = $$[$0 - 3];
          $$[$0 - 3].push({ required: true, name: $$[$0 - 1] });
          break;
        case 44:
          this.$ = {
            type: 'BUILT_IN',
            value: $$[$0 - 3] + " '" + $$[$0 - 1] + "'"
          };
          break;
        case 53:
        case 54:
          this.$ = {
            type: 'OPERATION',
            a: $$[$0 - 2],
            op: $$[$0 - 1],
            b: $$[$0]
          };
          break;
        case 65:
          this.$ = { type: 'FIELD', name: $$[$0], value: null, alias: null };
          break;
        case 66:
          this.$ = {
            type: 'FIELD',
            name: $$[$0 - 3],
            value: null,
            alias: $$[$0 - 1]
          };
          break;
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
          this.$ = {
            type: 'FIELD',
            name: $$[$0 - 2],
            value: $$[$0],
            alias: null
          };
          break;
        case 72:
          this.$ = {
            type: 'TABLE',
            name: $$[$0 - 2].trim(),
            params: $$[$0 - 1],
            nodes: $$[$0],
            delete: false
          };
          break;
        case 73:
          this.$ = {
            type: 'TABLE',
            name: $$[$0 - 1].trim(),
            params: [],
            nodes: $$[$0],
            delete: false
          };
          break;
        case 74:
          this.$ = {
            type: 'TABLE',
            name: $$[$0 - 1].trim(),
            params: $$[$0],
            nodes: [],
            delete: true
          };
          break;
        case 75:
          this.$ = {
            type: 'TABLE',
            name: $$[$0 - 2].trim(),
            params: $$[$0 - 1],
            nodes: $$[$0],
            delete: true
          };
          break;
        case 76:
          this.$ = {
            type: 'JOIN',
            table: $$[$0 - 2].trim(),
            on: $$[$0 - 1],
            nodes: $$[$0]
          };
          break;
      }
    },
    table: [
      { 16: 4, 17: $V0, 18: 1, 19: 2, 20: 3 },
      { 1: [3] },
      { 1: [2, 12], 16: 4, 17: $V0, 20: 6 },
      o($V1, [2, 16]),
      { 4: [1, 7] },
      { 4: [2, 11] },
      o($V1, [2, 15]),
      { 21: 8, 22: 9, 28: [1, 10], 47: $V2 },
      { 22: 12, 47: $V2 },
      o($V1, [2, 14]),
      { 29: [1, 13], 36: 15, 37: $V3, 38: 14 },
      {
        4: $V4,
        14: 23,
        15: $V5,
        44: $V6,
        48: 17,
        49: [1, 18],
        50: 19,
        51: 20,
        52: 21
      },
      o($V1, [2, 13]),
      { 47: [2, 38] },
      { 27: [1, 27], 29: [1, 26] },
      o($V7, [2, 40], { 39: [1, 28] }),
      { 4: [1, 29] },
      { 4: $V4, 14: 23, 15: $V5, 44: $V6, 49: [1, 30], 50: 31, 51: 20, 52: 21 },
      o($V8, [2, 60]),
      o($V9, [2, 61]),
      o($V9, [2, 63]),
      o($V9, [2, 64]),
      o($V9, [2, 65], {
        46: 34,
        22: 35,
        28: $Va,
        34: [1, 32],
        47: $V2,
        53: [1, 33]
      }),
      { 4: [1, 37] },
      { 4: [1, 38] },
      { 4: [2, 10] },
      { 47: [2, 39] },
      { 36: 39, 37: $V3 },
      o($V7, [2, 41]),
      o([4, 15, 27, 29, 35, 39, 43, 44, 49], [2, 36]),
      o($V8, [2, 59]),
      o($V9, [2, 62]),
      { 4: [1, 40] },
      {
        3: 43,
        4: [1, 48],
        8: $Vb,
        9: 42,
        10: $Vc,
        11: 44,
        12: 41,
        13: $Vd,
        30: 45,
        36: 50,
        37: $V3
      },
      { 22: 51, 47: $V2 },
      o($V9, [2, 73]),
      {
        3: 61,
        4: $Ve,
        5: 54,
        8: $Vb,
        9: 60,
        10: $Vc,
        11: 58,
        23: 56,
        28: $Vf,
        30: 55,
        33: 59,
        34: $Vg,
        36: 50,
        37: $V3,
        40: 57,
        42: 53,
        45: 52
      },
      { 28: $Va, 46: 65 },
      { 28: $Va, 46: 66 },
      o($V7, [2, 42], { 39: [1, 67] }),
      { 35: [1, 68] },
      o($V9, [2, 67]),
      o($V9, [2, 68]),
      o($V9, [2, 69]),
      o($V9, [2, 70]),
      o($V9, [2, 71]),
      o([4, 15, 27, 29, 35, 44, 49], [2, 9]),
      o($Vh, [2, 7]),
      o($V9, $Vi),
      o($Vh, [2, 8]),
      o($Vh, [2, 37]),
      o($V9, [2, 72]),
      { 27: [1, 70], 29: [1, 69] },
      o($V7, [2, 56], { 43: $Vj, 44: $Vk }),
      o($Vl, [2, 45]),
      o($Vl, [2, 46]),
      o($Vl, [2, 47]),
      o($Vl, [2, 48]),
      o($Vl, [2, 49]),
      o($Vl, [2, 50]),
      o($Vl, [2, 51]),
      o($Vl, [2, 52]),
      {
        3: 61,
        4: $Ve,
        5: 54,
        8: $Vb,
        9: 60,
        10: $Vc,
        11: 58,
        23: 56,
        28: $Vf,
        30: 55,
        33: 59,
        34: $Vg,
        36: 50,
        37: $V3,
        40: 57,
        42: 73
      },
      o($Vl, $Vi, { 24: 75, 6: [1, 74], 28: $Vm, 41: [1, 76] }),
      o($Vn, [2, 27], {
        36: 50,
        31: 78,
        32: 79,
        9: 80,
        11: 81,
        12: 82,
        30: 83,
        23: 84,
        4: $Vo,
        8: $Vb,
        10: $Vc,
        13: $Vd,
        37: $V3
      }),
      { 22: 86, 47: $V2 },
      o($V9, [2, 74], { 22: 87, 47: $V2 }),
      o($V7, [2, 43]),
      o($V9, [2, 66]),
      o([4, 15, 44, 47, 49], [2, 58]),
      {
        3: 61,
        4: $Ve,
        5: 54,
        8: $Vb,
        9: 60,
        10: $Vc,
        11: 58,
        23: 56,
        28: $Vf,
        30: 55,
        33: 59,
        34: $Vg,
        36: 50,
        37: $V3,
        40: 57,
        42: 88
      },
      {
        3: 61,
        4: $Ve,
        5: 54,
        8: $Vb,
        9: 60,
        10: $Vc,
        11: 58,
        23: 56,
        28: $Vf,
        30: 55,
        33: 59,
        34: $Vg,
        36: 50,
        37: $V3,
        40: 57,
        42: 89
      },
      {
        3: 61,
        4: $Ve,
        5: 54,
        8: $Vb,
        9: 60,
        10: $Vc,
        11: 58,
        23: 56,
        28: $Vf,
        30: 55,
        33: 59,
        34: $Vg,
        36: 50,
        37: $V3,
        40: 57,
        42: 90
      },
      { 29: [1, 91], 43: $Vj, 44: $Vk },
      { 4: [1, 92] },
      o($Vp, [2, 17]),
      { 4: [1, 94], 7: 93, 8: [1, 95] },
      o($V7, [2, 18], {
        36: 50,
        25: 96,
        26: 97,
        9: 98,
        11: 99,
        12: 100,
        30: 101,
        23: 102,
        4: $Vo,
        8: $Vb,
        10: $Vc,
        13: $Vd,
        37: $V3
      }),
      { 27: [1, 104], 35: [1, 103] },
      o($Vn, [2, 28]),
      o($Vn, [2, 31]),
      o($Vn, [2, 32]),
      o($Vn, [2, 33]),
      o($Vn, [2, 34]),
      o($Vn, [2, 35]),
      { 24: 75, 28: $Vm },
      o($V9, [2, 76]),
      o($V9, [2, 75]),
      o($V7, [2, 57], { 43: $Vj, 44: $Vk }),
      o($V7, [2, 53], { 43: $Vj, 44: $Vk }),
      o($V7, [2, 54], { 43: $Vj, 44: $Vk }),
      o($Vl, [2, 55]),
      o($Vl, [2, 2]),
      { 4: [1, 107], 8: [1, 106], 41: [1, 105] },
      o($Vq, [2, 3]),
      o($Vq, [2, 4]),
      { 27: [1, 109], 29: [1, 108] },
      o($V7, [2, 19]),
      o($V7, [2, 22]),
      o($V7, [2, 23]),
      o($V7, [2, 24]),
      o($V7, [2, 25]),
      o($V7, [2, 26]),
      o($Vl, [2, 30]),
      {
        4: $Vo,
        8: $Vb,
        9: 80,
        10: $Vc,
        11: 81,
        12: 82,
        13: $Vd,
        23: 84,
        30: 83,
        32: 110,
        36: 50,
        37: $V3
      },
      o($Vl, [2, 44]),
      o($Vq, [2, 5]),
      o($Vq, [2, 6]),
      o($Vp, [2, 21]),
      {
        4: $Vo,
        8: $Vb,
        9: 98,
        10: $Vc,
        11: 99,
        12: 100,
        13: $Vd,
        23: 102,
        26: 111,
        30: 101,
        36: 50,
        37: $V3
      },
      o($Vn, [2, 29]),
      o($V7, [2, 20])
    ],
    defaultActions: { 5: [2, 11], 13: [2, 38], 25: [2, 10], 26: [2, 39] },
    parseError: function parseError(str, hash) {
      if (hash.recoverable) {
        this.trace(str);
      } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
      }
    },
    parse: function parse(input) {
      var self = this,
        stack = [0],
        tstack = [],
        vstack = [null],
        lstack = [],
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;
      var args = lstack.slice.call(arguments, 1);
      var lexer = Object.create(this.lexer);
      var sharedState = { yy: {} };
      for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
          sharedState.yy[k] = this.yy[k];
        }
      }
      lexer.setInput(input, sharedState.yy);
      sharedState.yy.lexer = lexer;
      sharedState.yy.parser = this;
      if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
      }
      var yyloc = lexer.yylloc;
      lstack.push(yyloc);
      var ranges = lexer.options && lexer.options.ranges;
      if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
      } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
      }
      function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
      }
      _token_stack: var lex = function() {
        var token;
        token = lexer.lex() || EOF;
        if (typeof token !== 'number') {
          token = self.symbols_[token] || token;
        }
        return token;
      };
      var symbol,
        preErrorSymbol,
        state,
        action,
        a,
        r,
        yyval = {},
        p,
        len,
        newState,
        expected;
      while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
          action = this.defaultActions[state];
        } else {
          if (symbol === null || typeof symbol == 'undefined') {
            symbol = lex();
          }
          action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
          var errStr = '';
          expected = [];
          for (p in table[state]) {
            if (this.terminals_[p] && p > TERROR) {
              expected.push("'" + this.terminals_[p] + "'");
            }
          }
          if (lexer.showPosition) {
            errStr =
              'Parse error on line ' +
              (yylineno + 1) +
              ':\n' +
              lexer.showPosition() +
              '\nExpecting ' +
              expected.join(', ') +
              ", got '" +
              (this.terminals_[symbol] || symbol) +
              "'";
          } else {
            errStr =
              'Parse error on line ' +
              (yylineno + 1) +
              ': Unexpected ' +
              (symbol == EOF
                ? 'end of input'
                : "'" + (this.terminals_[symbol] || symbol) + "'");
          }
          this.parseError(errStr, {
            text: lexer.match,
            token: this.terminals_[symbol] || symbol,
            line: lexer.yylineno,
            loc: yyloc,
            expected: expected
          });
        }
        if (action[0] instanceof Array && action.length > 1) {
          throw new Error(
            'Parse Error: multiple actions possible at state: ' +
              state +
              ', token: ' +
              symbol
          );
        }
        switch (action[0]) {
          case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
              yyleng = lexer.yyleng;
              yytext = lexer.yytext;
              yylineno = lexer.yylineno;
              yyloc = lexer.yylloc;
              if (recovering > 0) {
                recovering--;
              }
            } else {
              symbol = preErrorSymbol;
              preErrorSymbol = null;
            }
            break;
          case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
              first_line: lstack[lstack.length - (len || 1)].first_line,
              last_line: lstack[lstack.length - 1].last_line,
              first_column: lstack[lstack.length - (len || 1)].first_column,
              last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
              yyval._$.range = [
                lstack[lstack.length - (len || 1)].range[0],
                lstack[lstack.length - 1].range[1]
              ];
            }
            r = this.performAction.apply(
              yyval,
              [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
              ].concat(args)
            );
            if (typeof r !== 'undefined') {
              return r;
            }
            if (len) {
              stack = stack.slice(0, -1 * len * 2);
              vstack = vstack.slice(0, -1 * len);
              lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
          case 3:
            return true;
        }
      }
      return true;
    }
  };
  /* generated by jison-lex 0.3.4 */
  var lexer = (function() {
    var lexer = {
      EOF: 1,

      parseError: function parseError(str, hash) {
        if (this.yy.parser) {
          this.yy.parser.parseError(str, hash);
        } else {
          throw new Error(str);
        }
      },

      // resets the lexer, sets new input
      setInput: function(input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
          first_line: 1,
          first_column: 0,
          last_line: 1,
          last_column: 0
        };
        if (this.options.ranges) {
          this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
      },

      // consumes and returns one char from the input
      input: function() {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno++;
          this.yylloc.last_line++;
        } else {
          this.yylloc.last_column++;
        }
        if (this.options.ranges) {
          this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
      },

      // unshifts one char (or a string) into the input
      unput: function(ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
          this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
          first_line: this.yylloc.first_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.first_column,
          last_column: lines
            ? (lines.length === oldLines.length
                ? this.yylloc.first_column
                : 0) +
              oldLines[oldLines.length - lines.length].length -
              lines[0].length
            : this.yylloc.first_column - len
        };

        if (this.options.ranges) {
          this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
      },

      // When called from action, caches matched text and appends it on next action
      more: function() {
        this._more = true;
        return this;
      },

      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
      reject: function() {
        if (this.options.backtrack_lexer) {
          this._backtrack = true;
        } else {
          return this.parseError(
            'Lexical error on line ' +
              (this.yylineno + 1) +
              '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' +
              this.showPosition(),
            {
              text: '',
              token: null,
              line: this.yylineno
            }
          );
        }
        return this;
      },

      // retain first n characters of the match
      less: function(n) {
        this.unput(this.match.slice(n));
      },

      // displays already matched input, i.e. for error messages
      pastInput: function() {
        var past = this.matched.substr(
          0,
          this.matched.length - this.match.length
        );
        return (
          (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, '')
        );
      },

      // displays upcoming input, i.e. for error messages
      upcomingInput: function() {
        var next = this.match;
        if (next.length < 20) {
          next += this._input.substr(0, 20 - next.length);
        }
        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(
          /\n/g,
          ''
        );
      },

      // displays the character position where the lexing error occurred, i.e. for error messages
      showPosition: function() {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join('-');
        return pre + this.upcomingInput() + '\n' + c + '^';
      },

      // test the lexed token: return FALSE when not a match, otherwise return token
      test_match: function(match, indexed_rule) {
        var token, lines, backup;

        if (this.options.backtrack_lexer) {
          // save context
          backup = {
            yylineno: this.yylineno,
            yylloc: {
              first_line: this.yylloc.first_line,
              last_line: this.last_line,
              first_column: this.yylloc.first_column,
              last_column: this.yylloc.last_column
            },
            yytext: this.yytext,
            match: this.match,
            matches: this.matches,
            matched: this.matched,
            yyleng: this.yyleng,
            offset: this.offset,
            _more: this._more,
            _input: this._input,
            yy: this.yy,
            conditionStack: this.conditionStack.slice(0),
            done: this.done
          };
          if (this.options.ranges) {
            backup.yylloc.range = this.yylloc.range.slice(0);
          }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno += lines.length;
        }
        this.yylloc = {
          first_line: this.yylloc.last_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.last_column,
          last_column: lines
            ? lines[lines.length - 1].length -
              lines[lines.length - 1].match(/\r?\n?/)[0].length
            : this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
          this.yylloc.range = [this.offset, (this.offset += this.yyleng)];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(
          this,
          this.yy,
          this,
          indexed_rule,
          this.conditionStack[this.conditionStack.length - 1]
        );
        if (this.done && this._input) {
          this.done = false;
        }
        if (token) {
          return token;
        } else if (this._backtrack) {
          // recover context
          for (var k in backup) {
            this[k] = backup[k];
          }
          return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
      },

      // return next match in input
      next: function() {
        if (this.done) {
          return this.EOF;
        }
        if (!this._input) {
          this.done = true;
        }

        var token, match, tempMatch, index;
        if (!this._more) {
          this.yytext = '';
          this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
          tempMatch = this._input.match(this.rules[rules[i]]);
          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
            match = tempMatch;
            index = i;
            if (this.options.backtrack_lexer) {
              token = this.test_match(tempMatch, rules[i]);
              if (token !== false) {
                return token;
              } else if (this._backtrack) {
                match = false;
                continue; // rule action called reject() implying a rule MISmatch.
              } else {
                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                return false;
              }
            } else if (!this.options.flex) {
              break;
            }
          }
        }
        if (match) {
          token = this.test_match(match, rules[index]);
          if (token !== false) {
            return token;
          }
          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
          return false;
        }
        if (this._input === '') {
          return this.EOF;
        } else {
          return this.parseError(
            'Lexical error on line ' +
              (this.yylineno + 1) +
              '. Unrecognized text.\n' +
              this.showPosition(),
            {
              text: '',
              token: null,
              line: this.yylineno
            }
          );
        }
      },

      // return next match that has a token
      lex: function lex() {
        var r = this.next();
        if (r) {
          return r;
        } else {
          return this.lex();
        }
      },

      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
      begin: function begin(condition) {
        this.conditionStack.push(condition);
      },

      // pop the previously active lexer condition state off the condition stack
      popState: function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
          return this.conditionStack.pop();
        } else {
          return this.conditionStack[0];
        }
      },

      // produce the lexer rule set which is active for the currently active lexer condition state
      _currentRules: function _currentRules() {
        if (
          this.conditionStack.length &&
          this.conditionStack[this.conditionStack.length - 1]
        ) {
          return this.conditions[
            this.conditionStack[this.conditionStack.length - 1]
          ].rules;
        } else {
          return this.conditions['INITIAL'].rules;
        }
      },

      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
      topState: function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
          return this.conditionStack[n];
        } else {
          return 'INITIAL';
        }
      },

      // alias for begin(condition)
      pushState: function pushState(condition) {
        this.begin(condition);
      },

      // return the number of states currently on the stack
      stateStackSize: function stateStackSize() {
        return this.conditionStack.length;
      },
      options: {},
      performAction: function anonymous(
        yy,
        yy_,
        $avoiding_name_collisions,
        YY_START
      ) {
        var YYSTATE = YY_START;
        switch ($avoiding_name_collisions) {
          case 0:
            return 44;
            break;
          case 1:
            return 43;
            break;
          case 2 /* skip whitespace */:
            break;
          case 3:
            return 10;
            break;
          case 4:
            return 8;
            break;
          case 5:
            return 17;
            break;
          case 6:
            return 13;
            break;
          case 7:
            return 4;
            break;
          case 8:
            return 47;
            break;
          case 9:
            return 49;
            break;
          case 10:
            return 28;
            break;
          case 11:
            return 29;
            break;
          case 12:
            return 15;
            break;
          case 13:
            return 27;
            break;
          case 14:
            return "'";
            break;
          case 15:
            return '"';
            break;
          case 16:
            return 6;
            break;
          case 17:
            return 37;
            break;
          case 18:
            return 34;
            break;
          case 19:
            return 35;
            break;
          case 20:
            return 53;
            break;
          case 21:
            return 39;
            break;
        }
      },
      rules: [
        /^(?:-)/,
        /^(?:([\+*\/%&|^=><]+)|(![=<>]+)|(-)|(\s+in\s+))/,
        /^(?:\s+)/,
        /^(?:"(.*?)")/,
        /^(?:\d+\b)/,
        /^(?:query|mutation\b)/,
        /^(?:false|true\b)/,
        /^(?:[\w\_\d]+)/,
        /^(?:\{)/,
        /^(?:\})/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:\.{3}\s*on\b)/,
        /^(?:,)/,
        /^(?:')/,
        /^(?:")/,
        /^(?:\.)/,
        /^(?:\$)/,
        /^(?:\[)/,
        /^(?:\])/,
        /^(?::)/,
        /^(?:!)/
      ],
      conditions: {
        INITIAL: {
          rules: [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21
          ],
          inclusive: true
        }
      }
    };
    return lexer;
  })();
  parser.lexer = lexer;
  function Parser() {
    this.yy = {};
  }
  Parser.prototype = parser;
  parser.Parser = Parser;
  return new Parser();
})();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
  exports.parser = parser;
  exports.Parser = parser.Parser;
  exports.parse = function() {
    return parser.parse.apply(parser, arguments);
  };
  exports.main = function commonjsMain(args) {
    if (!args[1]) {
      console.log('Usage: ' + args[0] + ' FILE');
      process.exit(1);
    }
    var source = require('fs').readFileSync(
      require('path').normalize(args[1]),
      'utf8'
    );
    return exports.parser.parse(source);
  };
  if (typeof module !== 'undefined' && require.main === module) {
    exports.main(process.argv.slice(1));
  }
}
