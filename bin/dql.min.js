'use strict';
function _interopDefault(t) {
  return t && 'object' == typeof t && 'default' in t ? t.default : t;
}
Object.defineProperty(exports, '__esModule', { value: !0 });
var fs = _interopDefault(require('fs')),
  path = _interopDefault(require('path')),
  Nodes = {
    TABLE: 'TABLE',
    ARRAY: 'ARRAY',
    BOOLEAN: 'BOOLEAN',
    JOIN: 'JOIN',
    QUERY: 'QUERY',
    QUERY_CALL: 'QUERY_CALL',
    FIELD: 'FIELD',
    RAW_TEXT: 'RAW',
    LONG_TEXT: 'LONG_STRING',
    OPERATION: 'OPERATION',
    VARIABLE: 'VARIABLE',
    BUILT_IN: 'BUILT_IN',
    MUTATION: 'MUTATION'
  },
  commonjsGlobal =
    'undefined' != typeof window
      ? window
      : 'undefined' != typeof global
        ? global
        : 'undefined' != typeof self ? self : {};
function commonjsRequire() {
  throw new Error(
    'Dynamic requires are not currently supported by rollup-plugin-commonjs'
  );
}
function createCommonjsModule(t, e) {
  return t((e = { exports: {} }), e.exports), e.exports;
}
var parser_1 = createCommonjsModule(function(t, e) {
    var r = (function() {
      var t = function(t, e, r, n) {
          for (r = r || {}, n = t.length; n--; r[t[n]] = e);
          return r;
        },
        e = [1, 5],
        r = [1, 17],
        n = [1, 11],
        i = [1, 16],
        o = [1, 22],
        s = [1, 25],
        a = [1, 24],
        l = [27, 29],
        u = [1, 4, 15, 17, 44, 49],
        c = [4, 15, 44, 49],
        h = [1, 36],
        f = [1, 49],
        d = [1, 47],
        p = [1, 46],
        _ = [1, 63],
        y = [1, 62],
        v = [1, 64],
        g = [4, 15, 27, 29, 35, 43, 44, 49],
        m = [2, 1],
        b = [1, 71],
        k = [1, 72],
        O = [27, 29, 43, 44],
        B = [1, 77],
        w = [27, 35],
        P = [1, 85],
        E = [27, 29, 35, 43, 44],
        S = [4, 8, 41],
        F = {
          trace: function() {},
          yy: {},
          symbols_: {
            error: 2,
            RawString: 3,
            STRING: 4,
            FieldRef: 5,
            '.': 6,
            RawLongString: 7,
            NUMBER: 8,
            LongString: 9,
            LONG_STRING: 10,
            Number: 11,
            Boolean: 12,
            BOOLEAN: 13,
            Join: 14,
            JOIN_OP: 15,
            Definition: 16,
            DEFINITION: 17,
            Root: 18,
            DocumentList: 19,
            Document: 20,
            Variables: 21,
            Block: 22,
            QueryCall: 23,
            Params: 24,
            ParamList: 25,
            Param: 26,
            ',': 27,
            '(': 28,
            ')': 29,
            Variable: 30,
            ArrayList: 31,
            ArrayElement: 32,
            Array: 33,
            '[': 34,
            ']': 35,
            VARIABLE: 36,
            $: 37,
            VariableList: 38,
            '!': 39,
            BuiltInFunc: 40,
            "'": 41,
            Equation: 42,
            OPERATOR: 43,
            '-': 44,
            EquationList: 45,
            Selectors: 46,
            '{': 47,
            BlockContent: 48,
            '}': 49,
            Content: 50,
            JoinOperation: 51,
            TableOperation: 52,
            ':': 53,
            $accept: 0,
            $end: 1
          },
          terminals_: {
            2: 'error',
            4: 'STRING',
            6: '.',
            8: 'NUMBER',
            10: 'LONG_STRING',
            13: 'BOOLEAN',
            15: 'JOIN_OP',
            17: 'DEFINITION',
            27: ',',
            28: '(',
            29: ')',
            34: '[',
            35: ']',
            37: '$',
            39: '!',
            41: "'",
            43: 'OPERATOR',
            44: '-',
            47: '{',
            49: '}',
            53: ':'
          },
          productions_: [
            0,
            [3, 1],
            [5, 3],
            [7, 1],
            [7, 1],
            [7, 2],
            [7, 2],
            [9, 1],
            [11, 1],
            [12, 1],
            [14, 1],
            [16, 1],
            [18, 1],
            [20, 4],
            [20, 3],
            [19, 2],
            [19, 1],
            [23, 2],
            [25, 0],
            [25, 1],
            [25, 3],
            [24, 3],
            [26, 1],
            [26, 1],
            [26, 1],
            [26, 1],
            [26, 1],
            [31, 0],
            [31, 1],
            [31, 3],
            [33, 3],
            [32, 1],
            [32, 1],
            [32, 1],
            [32, 1],
            [32, 1],
            [36, 2],
            [30, 1],
            [21, 2],
            [21, 3],
            [38, 1],
            [38, 2],
            [38, 3],
            [38, 4],
            [40, 4],
            [42, 1],
            [42, 1],
            [42, 1],
            [42, 1],
            [42, 1],
            [42, 1],
            [42, 1],
            [42, 1],
            [42, 3],
            [42, 3],
            [42, 3],
            [45, 1],
            [45, 3],
            [46, 3],
            [22, 3],
            [22, 2],
            [48, 1],
            [48, 2],
            [50, 1],
            [50, 1],
            [50, 1],
            [50, 4],
            [50, 3],
            [50, 3],
            [50, 3],
            [50, 3],
            [50, 3],
            [52, 3],
            [52, 2],
            [52, 3],
            [52, 4],
            [51, 4]
          ],
          performAction: function(t, e, r, n, i, o, s) {
            var a = o.length - 1;
            switch (i) {
              case 1:
                this.$ = { type: 'RAW', value: o[a] };
                break;
              case 2:
                this.$ = { type: 'FIELD_REF', value: o[a - 2] + '.' + o[a] };
                break;
              case 3:
              case 4:
              case 10:
              case 11:
              case 22:
              case 23:
              case 24:
              case 25:
              case 26:
              case 31:
              case 32:
              case 33:
              case 34:
              case 35:
              case 36:
              case 45:
              case 46:
              case 47:
              case 48:
              case 49:
              case 50:
              case 51:
              case 52:
              case 63:
              case 64:
                this.$ = o[a];
                break;
              case 5:
              case 6:
                this.$ = o[a - 1] + ' ' + o[a];
                break;
              case 7:
                this.$ = {
                  type: 'LONG_STRING',
                  value: o[a].substr(1, o[a].length - 2)
                };
                break;
              case 8:
                this.$ = { type: 'NUMBER', value: Number(o[a]) };
                break;
              case 9:
                this.$ = { type: 'BOOLEAN', value: 'true' === o[a] };
                break;
              case 12:
                return (this.$ = o[a]);
              case 13:
                this.$ = {
                  type: o[a - 3].toUpperCase(),
                  name: o[a - 2],
                  variables: o[a - 1],
                  nodes: o[a]
                };
                break;
              case 14:
                this.$ = {
                  type: o[a - 2].toUpperCase(),
                  name: o[a - 1],
                  variables: [],
                  nodes: o[a]
                };
                break;
              case 15:
              case 62:
                (this.$ = o[a - 1]), o[a - 1].push(o[a]);
                break;
              case 16:
              case 19:
              case 28:
              case 56:
              case 61:
                this.$ = [o[a]];
                break;
              case 17:
                this.$ = { type: 'QUERY_CALL', name: o[a - 1], params: o[a] };
                break;
              case 18:
              case 27:
                this.$ = [''];
                break;
              case 20:
              case 29:
              case 57:
                (this.$ = o[a - 2]), o[a - 2].push(o[a]);
                break;
              case 21:
              case 39:
              case 55:
              case 58:
              case 59:
                this.$ = o[a - 1];
                break;
              case 30:
                this.$ = { type: 'ARRAY', value: o[a - 1] };
                break;
              case 37:
                this.$ = { type: 'VARIABLE', value: o[a] };
                break;
              case 38:
              case 60:
                this.$ = [];
                break;
              case 40:
                this.$ = [{ required: !1, name: o[a] }];
                break;
              case 41:
                this.$ = [{ required: !0, name: o[a - 1] }];
                break;
              case 42:
                (this.$ = o[a - 2]),
                  o[a - 2].push({ required: !1, name: o[a] });
                break;
              case 43:
                (this.$ = o[a - 3]),
                  o[a - 3].push({ required: !0, name: o[a - 1] });
                break;
              case 44:
                this.$ = {
                  type: 'BUILT_IN',
                  value: o[a - 3] + " '" + o[a - 1] + "'"
                };
                break;
              case 53:
              case 54:
                this.$ = {
                  type: 'OPERATION',
                  a: o[a - 2],
                  op: o[a - 1],
                  b: o[a]
                };
                break;
              case 65:
                this.$ = {
                  type: 'FIELD',
                  name: o[a],
                  value: null,
                  alias: null
                };
                break;
              case 66:
                this.$ = {
                  type: 'FIELD',
                  name: o[a - 3],
                  value: null,
                  alias: o[a - 1]
                };
                break;
              case 67:
              case 68:
              case 69:
              case 70:
              case 71:
                this.$ = {
                  type: 'FIELD',
                  name: o[a - 2],
                  value: o[a],
                  alias: null
                };
                break;
              case 72:
                this.$ = {
                  type: 'TABLE',
                  name: o[a - 2].trim(),
                  params: o[a - 1],
                  nodes: o[a],
                  delete: !1
                };
                break;
              case 73:
                this.$ = {
                  type: 'TABLE',
                  name: o[a - 1].trim(),
                  params: [],
                  nodes: o[a],
                  delete: !1
                };
                break;
              case 74:
                this.$ = {
                  type: 'TABLE',
                  name: o[a - 1].trim(),
                  params: o[a],
                  nodes: [],
                  delete: !0
                };
                break;
              case 75:
                this.$ = {
                  type: 'TABLE',
                  name: o[a - 2].trim(),
                  params: o[a - 1],
                  nodes: o[a],
                  delete: !0
                };
                break;
              case 76:
                this.$ = {
                  type: 'JOIN',
                  table: o[a - 2].trim(),
                  on: o[a - 1],
                  nodes: o[a]
                };
            }
          },
          table: [
            { 16: 4, 17: e, 18: 1, 19: 2, 20: 3 },
            { 1: [3] },
            { 1: [2, 12], 16: 4, 17: e, 20: 6 },
            t(r, [2, 16]),
            { 4: [1, 7] },
            { 4: [2, 11] },
            t(r, [2, 15]),
            { 21: 8, 22: 9, 28: [1, 10], 47: n },
            { 22: 12, 47: n },
            t(r, [2, 14]),
            { 29: [1, 13], 36: 15, 37: i, 38: 14 },
            {
              4: o,
              14: 23,
              15: s,
              44: a,
              48: 17,
              49: [1, 18],
              50: 19,
              51: 20,
              52: 21
            },
            t(r, [2, 13]),
            { 47: [2, 38] },
            { 27: [1, 27], 29: [1, 26] },
            t(l, [2, 40], { 39: [1, 28] }),
            { 4: [1, 29] },
            { 4: o, 14: 23, 15: s, 44: a, 49: [1, 30], 50: 31, 51: 20, 52: 21 },
            t(u, [2, 60]),
            t(c, [2, 61]),
            t(c, [2, 63]),
            t(c, [2, 64]),
            t(c, [2, 65], {
              46: 34,
              22: 35,
              28: h,
              34: [1, 32],
              47: n,
              53: [1, 33]
            }),
            { 4: [1, 37] },
            { 4: [1, 38] },
            { 4: [2, 10] },
            { 47: [2, 39] },
            { 36: 39, 37: i },
            t(l, [2, 41]),
            t([4, 15, 27, 29, 35, 39, 43, 44, 49], [2, 36]),
            t(u, [2, 59]),
            t(c, [2, 62]),
            { 4: [1, 40] },
            {
              3: 43,
              4: [1, 48],
              8: f,
              9: 42,
              10: d,
              11: 44,
              12: 41,
              13: p,
              30: 45,
              36: 50,
              37: i
            },
            { 22: 51, 47: n },
            t(c, [2, 73]),
            {
              3: 61,
              4: _,
              5: 54,
              8: f,
              9: 60,
              10: d,
              11: 58,
              23: 56,
              28: y,
              30: 55,
              33: 59,
              34: v,
              36: 50,
              37: i,
              40: 57,
              42: 53,
              45: 52
            },
            { 28: h, 46: 65 },
            { 28: h, 46: 66 },
            t(l, [2, 42], { 39: [1, 67] }),
            { 35: [1, 68] },
            t(c, [2, 67]),
            t(c, [2, 68]),
            t(c, [2, 69]),
            t(c, [2, 70]),
            t(c, [2, 71]),
            t([4, 15, 27, 29, 35, 44, 49], [2, 9]),
            t(g, [2, 7]),
            t(c, m),
            t(g, [2, 8]),
            t(g, [2, 37]),
            t(c, [2, 72]),
            { 27: [1, 70], 29: [1, 69] },
            t(l, [2, 56], { 43: b, 44: k }),
            t(O, [2, 45]),
            t(O, [2, 46]),
            t(O, [2, 47]),
            t(O, [2, 48]),
            t(O, [2, 49]),
            t(O, [2, 50]),
            t(O, [2, 51]),
            t(O, [2, 52]),
            {
              3: 61,
              4: _,
              5: 54,
              8: f,
              9: 60,
              10: d,
              11: 58,
              23: 56,
              28: y,
              30: 55,
              33: 59,
              34: v,
              36: 50,
              37: i,
              40: 57,
              42: 73
            },
            t(O, m, { 24: 75, 6: [1, 74], 28: B, 41: [1, 76] }),
            t(w, [2, 27], {
              36: 50,
              31: 78,
              32: 79,
              9: 80,
              11: 81,
              12: 82,
              30: 83,
              23: 84,
              4: P,
              8: f,
              10: d,
              13: p,
              37: i
            }),
            { 22: 86, 47: n },
            t(c, [2, 74], { 22: 87, 47: n }),
            t(l, [2, 43]),
            t(c, [2, 66]),
            t([4, 15, 44, 47, 49], [2, 58]),
            {
              3: 61,
              4: _,
              5: 54,
              8: f,
              9: 60,
              10: d,
              11: 58,
              23: 56,
              28: y,
              30: 55,
              33: 59,
              34: v,
              36: 50,
              37: i,
              40: 57,
              42: 88
            },
            {
              3: 61,
              4: _,
              5: 54,
              8: f,
              9: 60,
              10: d,
              11: 58,
              23: 56,
              28: y,
              30: 55,
              33: 59,
              34: v,
              36: 50,
              37: i,
              40: 57,
              42: 89
            },
            {
              3: 61,
              4: _,
              5: 54,
              8: f,
              9: 60,
              10: d,
              11: 58,
              23: 56,
              28: y,
              30: 55,
              33: 59,
              34: v,
              36: 50,
              37: i,
              40: 57,
              42: 90
            },
            { 29: [1, 91], 43: b, 44: k },
            { 4: [1, 92] },
            t(E, [2, 17]),
            { 4: [1, 94], 7: 93, 8: [1, 95] },
            t(l, [2, 18], {
              36: 50,
              25: 96,
              26: 97,
              9: 98,
              11: 99,
              12: 100,
              30: 101,
              23: 102,
              4: P,
              8: f,
              10: d,
              13: p,
              37: i
            }),
            { 27: [1, 104], 35: [1, 103] },
            t(w, [2, 28]),
            t(w, [2, 31]),
            t(w, [2, 32]),
            t(w, [2, 33]),
            t(w, [2, 34]),
            t(w, [2, 35]),
            { 24: 75, 28: B },
            t(c, [2, 76]),
            t(c, [2, 75]),
            t(l, [2, 57], { 43: b, 44: k }),
            t(l, [2, 53], { 43: b, 44: k }),
            t(l, [2, 54], { 43: b, 44: k }),
            t(O, [2, 55]),
            t(O, [2, 2]),
            { 4: [1, 107], 8: [1, 106], 41: [1, 105] },
            t(S, [2, 3]),
            t(S, [2, 4]),
            { 27: [1, 109], 29: [1, 108] },
            t(l, [2, 19]),
            t(l, [2, 22]),
            t(l, [2, 23]),
            t(l, [2, 24]),
            t(l, [2, 25]),
            t(l, [2, 26]),
            t(O, [2, 30]),
            {
              4: P,
              8: f,
              9: 80,
              10: d,
              11: 81,
              12: 82,
              13: p,
              23: 84,
              30: 83,
              32: 110,
              36: 50,
              37: i
            },
            t(O, [2, 44]),
            t(S, [2, 5]),
            t(S, [2, 6]),
            t(E, [2, 21]),
            {
              4: P,
              8: f,
              9: 98,
              10: d,
              11: 99,
              12: 100,
              13: p,
              23: 102,
              26: 111,
              30: 101,
              36: 50,
              37: i
            },
            t(w, [2, 29]),
            t(l, [2, 20])
          ],
          defaultActions: { 5: [2, 11], 13: [2, 38], 25: [2, 10], 26: [2, 39] },
          parseError: function(t, e) {
            if (!e.recoverable) {
              var r = new Error(t);
              throw ((r.hash = e), r);
            }
            this.trace(t);
          },
          parse: function(t) {
            var e = this,
              r = [0],
              n = [null],
              i = [],
              o = this.table,
              s = '',
              a = 0,
              l = 0,
              u = i.slice.call(arguments, 1),
              c = Object.create(this.lexer),
              h = { yy: {} };
            for (var f in this.yy)
              Object.prototype.hasOwnProperty.call(this.yy, f) &&
                (h.yy[f] = this.yy[f]);
            c.setInput(t, h.yy),
              (h.yy.lexer = c),
              (h.yy.parser = this),
              void 0 === c.yylloc && (c.yylloc = {});
            var d = c.yylloc;
            i.push(d);
            var p = c.options && c.options.ranges;
            'function' == typeof h.yy.parseError
              ? (this.parseError = h.yy.parseError)
              : (this.parseError = Object.getPrototypeOf(this).parseError);
            for (
              var _,
                y,
                v,
                g,
                m,
                b,
                k,
                O,
                B,
                w = function() {
                  var t;
                  return (
                    'number' != typeof (t = c.lex() || 1) &&
                      (t = e.symbols_[t] || t),
                    t
                  );
                },
                P = {};
              ;

            ) {
              if (
                ((v = r[r.length - 1]),
                this.defaultActions[v]
                  ? (g = this.defaultActions[v])
                  : ((null !== _ && void 0 !== _) || (_ = w()),
                    (g = o[v] && o[v][_])),
                void 0 === g || !g.length || !g[0])
              ) {
                var E = '';
                for (b in ((B = []), o[v]))
                  this.terminals_[b] &&
                    b > 2 &&
                    B.push("'" + this.terminals_[b] + "'");
                (E = c.showPosition
                  ? 'Parse error on line ' +
                    (a + 1) +
                    ':\n' +
                    c.showPosition() +
                    '\nExpecting ' +
                    B.join(', ') +
                    ", got '" +
                    (this.terminals_[_] || _) +
                    "'"
                  : 'Parse error on line ' +
                    (a + 1) +
                    ': Unexpected ' +
                    (1 == _
                      ? 'end of input'
                      : "'" + (this.terminals_[_] || _) + "'")),
                  this.parseError(E, {
                    text: c.match,
                    token: this.terminals_[_] || _,
                    line: c.yylineno,
                    loc: d,
                    expected: B
                  });
              }
              if (g[0] instanceof Array && g.length > 1)
                throw new Error(
                  'Parse Error: multiple actions possible at state: ' +
                    v +
                    ', token: ' +
                    _
                );
              switch (g[0]) {
                case 1:
                  r.push(_),
                    n.push(c.yytext),
                    i.push(c.yylloc),
                    r.push(g[1]),
                    (_ = null),
                    y
                      ? ((_ = y), (y = null))
                      : ((l = c.yyleng),
                        (s = c.yytext),
                        (a = c.yylineno),
                        (d = c.yylloc));
                  break;
                case 2:
                  if (
                    ((k = this.productions_[g[1]][1]),
                    (P.$ = n[n.length - k]),
                    (P._$ = {
                      first_line: i[i.length - (k || 1)].first_line,
                      last_line: i[i.length - 1].last_line,
                      first_column: i[i.length - (k || 1)].first_column,
                      last_column: i[i.length - 1].last_column
                    }),
                    p &&
                      (P._$.range = [
                        i[i.length - (k || 1)].range[0],
                        i[i.length - 1].range[1]
                      ]),
                    void 0 !==
                      (m = this.performAction.apply(
                        P,
                        [s, l, a, h.yy, g[1], n, i].concat(u)
                      )))
                  )
                    return m;
                  k &&
                    ((r = r.slice(0, -1 * k * 2)),
                    (n = n.slice(0, -1 * k)),
                    (i = i.slice(0, -1 * k))),
                    r.push(this.productions_[g[1]][0]),
                    n.push(P.$),
                    i.push(P._$),
                    (O = o[r[r.length - 2]][r[r.length - 1]]),
                    r.push(O);
                  break;
                case 3:
                  return !0;
              }
            }
            return !0;
          }
        },
        T = {
          EOF: 1,
          parseError: function(t, e) {
            if (!this.yy.parser) throw new Error(t);
            this.yy.parser.parseError(t, e);
          },
          setInput: function(t, e) {
            return (
              (this.yy = e || this.yy || {}),
              (this._input = t),
              (this._more = this._backtrack = this.done = !1),
              (this.yylineno = this.yyleng = 0),
              (this.yytext = this.matched = this.match = ''),
              (this.conditionStack = ['INITIAL']),
              (this.yylloc = {
                first_line: 1,
                first_column: 0,
                last_line: 1,
                last_column: 0
              }),
              this.options.ranges && (this.yylloc.range = [0, 0]),
              (this.offset = 0),
              this
            );
          },
          input: function() {
            var t = this._input[0];
            return (
              (this.yytext += t),
              this.yyleng++,
              this.offset++,
              (this.match += t),
              (this.matched += t),
              t.match(/(?:\r\n?|\n).*/g)
                ? (this.yylineno++, this.yylloc.last_line++)
                : this.yylloc.last_column++,
              this.options.ranges && this.yylloc.range[1]++,
              (this._input = this._input.slice(1)),
              t
            );
          },
          unput: function(t) {
            var e = t.length,
              r = t.split(/(?:\r\n?|\n)/g);
            (this._input = t + this._input),
              (this.yytext = this.yytext.substr(0, this.yytext.length - e)),
              (this.offset -= e);
            var n = this.match.split(/(?:\r\n?|\n)/g);
            (this.match = this.match.substr(0, this.match.length - 1)),
              (this.matched = this.matched.substr(0, this.matched.length - 1)),
              r.length - 1 && (this.yylineno -= r.length - 1);
            var i = this.yylloc.range;
            return (
              (this.yylloc = {
                first_line: this.yylloc.first_line,
                last_line: this.yylineno + 1,
                first_column: this.yylloc.first_column,
                last_column: r
                  ? (r.length === n.length ? this.yylloc.first_column : 0) +
                    n[n.length - r.length].length -
                    r[0].length
                  : this.yylloc.first_column - e
              }),
              this.options.ranges &&
                (this.yylloc.range = [i[0], i[0] + this.yyleng - e]),
              (this.yyleng = this.yytext.length),
              this
            );
          },
          more: function() {
            return (this._more = !0), this;
          },
          reject: function() {
            return this.options.backtrack_lexer
              ? ((this._backtrack = !0), this)
              : this.parseError(
                  'Lexical error on line ' +
                    (this.yylineno + 1) +
                    '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' +
                    this.showPosition(),
                  { text: '', token: null, line: this.yylineno }
                );
          },
          less: function(t) {
            this.unput(this.match.slice(t));
          },
          pastInput: function() {
            var t = this.matched.substr(
              0,
              this.matched.length - this.match.length
            );
            return (
              (t.length > 20 ? '...' : '') + t.substr(-20).replace(/\n/g, '')
            );
          },
          upcomingInput: function() {
            var t = this.match;
            return (
              t.length < 20 && (t += this._input.substr(0, 20 - t.length)),
              (t.substr(0, 20) + (t.length > 20 ? '...' : '')).replace(
                /\n/g,
                ''
              )
            );
          },
          showPosition: function() {
            var t = this.pastInput(),
              e = new Array(t.length + 1).join('-');
            return t + this.upcomingInput() + '\n' + e + '^';
          },
          test_match: function(t, e) {
            var r, n, i;
            if (
              (this.options.backtrack_lexer &&
                ((i = {
                  yylineno: this.yylineno,
                  yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                  },
                  yytext: this.yytext,
                  match: this.match,
                  matches: this.matches,
                  matched: this.matched,
                  yyleng: this.yyleng,
                  offset: this.offset,
                  _more: this._more,
                  _input: this._input,
                  yy: this.yy,
                  conditionStack: this.conditionStack.slice(0),
                  done: this.done
                }),
                this.options.ranges &&
                  (i.yylloc.range = this.yylloc.range.slice(0))),
              (n = t[0].match(/(?:\r\n?|\n).*/g)) &&
                (this.yylineno += n.length),
              (this.yylloc = {
                first_line: this.yylloc.last_line,
                last_line: this.yylineno + 1,
                first_column: this.yylloc.last_column,
                last_column: n
                  ? n[n.length - 1].length -
                    n[n.length - 1].match(/\r?\n?/)[0].length
                  : this.yylloc.last_column + t[0].length
              }),
              (this.yytext += t[0]),
              (this.match += t[0]),
              (this.matches = t),
              (this.yyleng = this.yytext.length),
              this.options.ranges &&
                (this.yylloc.range = [
                  this.offset,
                  (this.offset += this.yyleng)
                ]),
              (this._more = !1),
              (this._backtrack = !1),
              (this._input = this._input.slice(t[0].length)),
              (this.matched += t[0]),
              (r = this.performAction.call(
                this,
                this.yy,
                this,
                e,
                this.conditionStack[this.conditionStack.length - 1]
              )),
              this.done && this._input && (this.done = !1),
              r)
            )
              return r;
            if (this._backtrack) {
              for (var o in i) this[o] = i[o];
              return !1;
            }
            return !1;
          },
          next: function() {
            if (this.done) return this.EOF;
            var t, e, r, n;
            this._input || (this.done = !0),
              this._more || ((this.yytext = ''), (this.match = ''));
            for (var i = this._currentRules(), o = 0; o < i.length; o++)
              if (
                (r = this._input.match(this.rules[i[o]])) &&
                (!e || r[0].length > e[0].length)
              ) {
                if (((e = r), (n = o), this.options.backtrack_lexer)) {
                  if (!1 !== (t = this.test_match(r, i[o]))) return t;
                  if (this._backtrack) {
                    e = !1;
                    continue;
                  }
                  return !1;
                }
                if (!this.options.flex) break;
              }
            return e
              ? !1 !== (t = this.test_match(e, i[n])) && t
              : '' === this._input
                ? this.EOF
                : this.parseError(
                    'Lexical error on line ' +
                      (this.yylineno + 1) +
                      '. Unrecognized text.\n' +
                      this.showPosition(),
                    { text: '', token: null, line: this.yylineno }
                  );
          },
          lex: function() {
            var t = this.next();
            return t || this.lex();
          },
          begin: function(t) {
            this.conditionStack.push(t);
          },
          popState: function() {
            return this.conditionStack.length - 1 > 0
              ? this.conditionStack.pop()
              : this.conditionStack[0];
          },
          _currentRules: function() {
            return this.conditionStack.length &&
              this.conditionStack[this.conditionStack.length - 1]
              ? this.conditions[
                  this.conditionStack[this.conditionStack.length - 1]
                ].rules
              : this.conditions.INITIAL.rules;
          },
          topState: function(t) {
            return (t = this.conditionStack.length - 1 - Math.abs(t || 0)) >= 0
              ? this.conditionStack[t]
              : 'INITIAL';
          },
          pushState: function(t) {
            this.begin(t);
          },
          stateStackSize: function() {
            return this.conditionStack.length;
          },
          options: {},
          performAction: function(t, e, r, n) {
            switch (r) {
              case 0:
                break;
              case 1:
                return 44;
              case 2:
                return 43;
              case 3:
                return 10;
              case 4:
                return 8;
              case 5:
                return 17;
              case 6:
                return 13;
              case 7:
                return 4;
              case 8:
                return 47;
              case 9:
                return 49;
              case 10:
                return 28;
              case 11:
                return 29;
              case 12:
                return 15;
              case 13:
                return 27;
              case 14:
                return "'";
              case 15:
                return '"';
              case 16:
                return 6;
              case 17:
                return 37;
              case 18:
                return 34;
              case 19:
                return 35;
              case 20:
                return 53;
              case 21:
                return 39;
            }
          },
          rules: [
            /^(?:\s+)/,
            /^(?:-)/,
            /^(?:([\+*\/%&|^=><]+)|(![=<>]+)|(-)|(in))/,
            /^(?:"(.*?)")/,
            /^(?:\d+\b)/,
            /^(?:query|mutation\b)/,
            /^(?:false|true\b)/,
            /^(?:[\w\_\d]+)/,
            /^(?:\{)/,
            /^(?:\})/,
            /^(?:\()/,
            /^(?:\))/,
            /^(?:\.{3}\s*on\b)/,
            /^(?:,)/,
            /^(?:')/,
            /^(?:")/,
            /^(?:\.)/,
            /^(?:\$)/,
            /^(?:\[)/,
            /^(?:\])/,
            /^(?::)/,
            /^(?:!)/
          ],
          conditions: {
            INITIAL: {
              rules: [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21
              ],
              inclusive: !0
            }
          }
        };
      function A() {
        this.yy = {};
      }
      return (F.lexer = T), (A.prototype = F), (F.Parser = A), new A();
    })();
    void 0 !== commonjsRequire &&
      ((e.parser = r),
      (e.Parser = r.Parser),
      (e.parse = function() {
        return r.parse.apply(r, arguments);
      }),
      (e.main = function(t) {
        t[1] || (console.log('Usage: ' + t[0] + ' FILE'), process.exit(1));
        var r = fs.readFileSync(path.normalize(t[1]), 'utf8');
        return e.parser.parse(r);
      }),
      commonjsRequire.main === t && e.main(process.argv.slice(1)));
  }),
  parser_2 = parser_1.parser,
  parser_3 = parser_1.Parser,
  parser_4 = parser_1.parse,
  parser_5 = parser_1.main,
  squel = createCommonjsModule(function(t, e) {
    var r;
    (r = function() {
      var t = function t(e, r, n) {
          null === e && (e = Function.prototype);
          var i = Object.getOwnPropertyDescriptor(e, r);
          if (void 0 === i) {
            var o = Object.getPrototypeOf(e);
            return null === o ? void 0 : t(o, r, n);
          }
          if ('value' in i) return i.value;
          var s = i.get;
          return void 0 !== s ? s.call(n) : void 0;
        },
        e = (function() {
          function t(t, e) {
            for (var r = 0; r < e.length; r++) {
              var n = e[r];
              (n.enumerable = n.enumerable || !1),
                (n.configurable = !0),
                'value' in n && (n.writable = !0),
                Object.defineProperty(t, n.key, n);
            }
          }
          return function(e, r, n) {
            return r && t(e.prototype, r), n && t(e, n), e;
          };
        })(),
        r =
          'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
            ? function(t) {
                return typeof t;
              }
            : function(t) {
                return t &&
                  'function' == typeof Symbol &&
                  t.constructor === Symbol &&
                  t !== Symbol.prototype
                  ? 'symbol'
                  : typeof t;
              };
      function n(t, e) {
        if (!t)
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          );
        return !e || ('object' != typeof e && 'function' != typeof e) ? t : e;
      }
      function i(t, e) {
        if ('function' != typeof e && null !== e)
          throw new TypeError(
            'Super expression must either be null or a function, not ' +
              typeof e
          );
        (t.prototype = Object.create(e && e.prototype, {
          constructor: {
            value: t,
            enumerable: !1,
            writable: !0,
            configurable: !0
          }
        })),
          e &&
            (Object.setPrototypeOf
              ? Object.setPrototypeOf(t, e)
              : (t.__proto__ = e));
      }
      function o(t, e) {
        if (!(t instanceof e))
          throw new TypeError('Cannot call a class as a function');
      }
      function s(t, e) {
        return t.length ? t + e : t;
      }
      function a(t) {
        for (
          var e = arguments.length, n = Array(e > 1 ? e - 1 : 0), i = 1;
          i < e;
          i++
        )
          n[i - 1] = arguments[i];
        if (t && n) {
          var o = !0,
            s = !1,
            a = void 0;
          try {
            for (
              var l,
                u = function() {
                  var e = l.value;
                  'object' === (void 0 === e ? 'undefined' : r(e)) &&
                    Object.getOwnPropertyNames(e).forEach(function(r) {
                      t[r] = e[r];
                    });
                },
                c = n[Symbol.iterator]();
              !(o = (l = c.next()).done);
              o = !0
            )
              u();
          } catch (t) {
            (s = !0), (a = t);
          } finally {
            try {
              !o && c.return && c.return();
            } finally {
              if (s) throw a;
            }
          }
        }
        return t;
      }
      function l(t) {
        return t && t.constructor.prototype === Object.prototype;
      }
      function u(t) {
        return t && t.constructor.prototype === Array.prototype;
      }
      function c(t, e, n) {
        var i = void 0 === e ? 'undefined' : r(e);
        if ('function' !== i && 'string' !== i)
          throw new Error('type must be a class constructor or string');
        if ('function' != typeof n)
          throw new Error('handler must be a function');
        var o = !0,
          s = !1,
          a = void 0;
        try {
          for (
            var l, u = t[Symbol.iterator]();
            !(o = (l = u.next()).done);
            o = !0
          ) {
            var c = l.value;
            if (c.type === e) return void (c.handler = n);
          }
        } catch (t) {
          (s = !0), (a = t);
        } finally {
          try {
            !o && u.return && u.return();
          } finally {
            if (s) throw a;
          }
        }
        t.push({ type: e, handler: n });
      }
      function h(t, e, r) {
        return f(t, e) || f(t, r);
      }
      function f(t, e) {
        for (var n = 0; n < e.length; n++) {
          var i = e[n];
          if (
            (void 0 === t ? 'undefined' : r(t)) === i.type ||
            ('string' != typeof i.type && t instanceof i.type)
          )
            return i.handler;
        }
      }
      function d() {
        var f =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : null,
          d = {
            isSquelBuilder: function(t) {
              return t && !!t._toParamString;
            }
          },
          p = function(t) {
            return !d.isSquelBuilder(t) || !t.options.rawNesting;
          };
        (d.DefaultQueryBuilderOptions = {
          autoQuoteTableNames: !1,
          autoQuoteFieldNames: !1,
          autoQuoteAliasNames: !0,
          useAsForTableAliasNames: !1,
          nameQuoteCharacter: '`',
          tableAliasQuoteCharacter: '`',
          fieldAliasQuoteCharacter: '"',
          valueHandlers: [],
          parameterCharacter: '?',
          numberedParameters: !1,
          numberedParametersPrefix: '$',
          numberedParametersStartAt: 1,
          replaceSingleQuotes: !1,
          singleQuoteReplacement: "''",
          separator: ' ',
          stringFormatter: null,
          rawNesting: !1
        }),
          (d.globalValueHandlers = []),
          (d.registerValueHandler = function(t, e) {
            c(d.globalValueHandlers, t, e);
          }),
          (d.Cloneable = (function() {
            function t() {
              o(this, t);
            }
            return (
              e(t, [
                {
                  key: 'clone',
                  value: function() {
                    return a(
                      new this.constructor(),
                      (function t(e) {
                        if (!e) return e;
                        if ('function' == typeof e.clone) return e.clone();
                        if (l(e) || u(e)) {
                          var r = new e.constructor();
                          return (
                            Object.getOwnPropertyNames(e).forEach(function(n) {
                              'function' != typeof e[n] && (r[n] = t(e[n]));
                            }),
                            r
                          );
                        }
                        return JSON.parse(JSON.stringify(e));
                      })(a({}, this))
                    );
                  }
                }
              ]),
              t
            );
          })()),
          (d.BaseBuilder = (function(t) {
            function s(t) {
              o(this, s);
              var e = n(
                  this,
                  (s.__proto__ || Object.getPrototypeOf(s)).call(this)
                ),
                r = JSON.parse(JSON.stringify(d.DefaultQueryBuilderOptions));
              return (
                ['stringFormatter'].forEach(function(t) {
                  r[t] = d.DefaultQueryBuilderOptions[t];
                }),
                (e.options = a({}, r, t)),
                e
              );
            }
            return (
              i(s, d.Cloneable),
              e(s, [
                {
                  key: 'registerValueHandler',
                  value: function(t, e) {
                    return c(this.options.valueHandlers, t, e), this;
                  }
                },
                {
                  key: '_sanitizeExpression',
                  value: function(t) {
                    if (!d.isSquelBuilder(t) && 'string' != typeof t)
                      throw new Error(
                        'expression must be a string or builder instance'
                      );
                    return t;
                  }
                },
                {
                  key: '_sanitizeName',
                  value: function(t, e) {
                    if ('string' != typeof t)
                      throw new Error(e + ' must be a string');
                    return t;
                  }
                },
                {
                  key: '_sanitizeField',
                  value: function(t) {
                    return (
                      d.isSquelBuilder(t) ||
                        (t = this._sanitizeName(t, 'field name')),
                      t
                    );
                  }
                },
                {
                  key: '_sanitizeBaseBuilder',
                  value: function(t) {
                    if (d.isSquelBuilder(t)) return t;
                    throw new Error('must be a builder instance');
                  }
                },
                {
                  key: '_sanitizeTable',
                  value: function(t) {
                    if ('string' != typeof t)
                      try {
                        t = this._sanitizeBaseBuilder(t);
                      } catch (t) {
                        throw new Error(
                          'table name must be a string or a builder'
                        );
                      }
                    else t = this._sanitizeName(t, 'table');
                    return t;
                  }
                },
                {
                  key: '_sanitizeTableAlias',
                  value: function(t) {
                    return this._sanitizeName(t, 'table alias');
                  }
                },
                {
                  key: '_sanitizeFieldAlias',
                  value: function(t) {
                    return this._sanitizeName(t, 'field alias');
                  }
                },
                {
                  key: '_sanitizeLimitOffset',
                  value: function(t) {
                    if (0 > (t = parseInt(t)) || isNaN(t))
                      throw new Error('limit/offset must be >= 0');
                    return t;
                  }
                },
                {
                  key: '_sanitizeValue',
                  value: function(t) {
                    var e = void 0 === t ? 'undefined' : r(t);
                    if (null === t);
                    else if (
                      'string' === e ||
                      'number' === e ||
                      'boolean' === e
                    );
                    else if (d.isSquelBuilder(t));
                    else {
                      if (
                        !!!h(
                          t,
                          this.options.valueHandlers,
                          d.globalValueHandlers
                        )
                      )
                        throw new Error(
                          'field value must be a string, number, boolean, null or one of the registered custom value types'
                        );
                    }
                    return t;
                  }
                },
                {
                  key: '_escapeValue',
                  value: function(t) {
                    return this.options.replaceSingleQuotes
                      ? t.replace(/\'/g, this.options.singleQuoteReplacement)
                      : t;
                  }
                },
                {
                  key: '_formatTableName',
                  value: function(t) {
                    if (this.options.autoQuoteTableNames) {
                      var e = this.options.nameQuoteCharacter;
                      t = '' + e + t + e;
                    }
                    return t;
                  }
                },
                {
                  key: '_formatFieldAlias',
                  value: function(t) {
                    if (this.options.autoQuoteAliasNames) {
                      var e = this.options.fieldAliasQuoteCharacter;
                      t = '' + e + t + e;
                    }
                    return t;
                  }
                },
                {
                  key: '_formatTableAlias',
                  value: function(t) {
                    if (this.options.autoQuoteAliasNames) {
                      var e = this.options.tableAliasQuoteCharacter;
                      t = '' + e + t + e;
                    }
                    return this.options.useAsForTableAliasNames ? 'AS ' + t : t;
                  }
                },
                {
                  key: '_formatFieldName',
                  value: function(t) {
                    var e =
                      arguments.length > 1 && void 0 !== arguments[1]
                        ? arguments[1]
                        : {};
                    if (this.options.autoQuoteFieldNames) {
                      var r = this.options.nameQuoteCharacter;
                      t = e.ignorePeriodsForFieldNameQuotes
                        ? '' + r + t + r
                        : t
                            .split('.')
                            .map(function(t) {
                              return '*' === t ? t : '' + r + t + r;
                            })
                            .join('.');
                    }
                    return t;
                  }
                },
                {
                  key: '_formatCustomValue',
                  value: function(t, e, r) {
                    var n = h(
                      t,
                      this.options.valueHandlers,
                      d.globalValueHandlers
                    );
                    return n && (t = n(t, e, r)) && t.rawNesting
                      ? { formatted: !0, rawNesting: !0, value: t.value }
                      : { formatted: !!n, value: t };
                  }
                },
                {
                  key: '_formatValueForParamArray',
                  value: function(t) {
                    var e = this,
                      r =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : {};
                    return u(t)
                      ? t.map(function(t) {
                          return e._formatValueForParamArray(t, r);
                        })
                      : this._formatCustomValue(t, !0, r).value;
                  }
                },
                {
                  key: '_formatValueForQueryString',
                  value: function(t) {
                    var e = this,
                      n =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : {},
                      i = this._formatCustomValue(t, !1, n),
                      o = i.rawNesting,
                      s = i.formatted,
                      a = i.value;
                    if (s) return o ? a : this._applyNestingFormatting(a, p(t));
                    if (u(a))
                      (a = a.map(function(t) {
                        return e._formatValueForQueryString(t);
                      })),
                        (a = this._applyNestingFormatting(a.join(', '), p(a)));
                    else {
                      var l = void 0 === a ? 'undefined' : r(a);
                      if (null === a) a = 'NULL';
                      else if ('boolean' === l) a = a ? 'TRUE' : 'FALSE';
                      else if (d.isSquelBuilder(a))
                        a = this._applyNestingFormatting(a.toString(), p(a));
                      else if ('number' !== l) {
                        if ('string' === l && this.options.stringFormatter)
                          return this.options.stringFormatter(a);
                        if (n.dontQuote) a = '' + a;
                        else a = "'" + this._escapeValue(a) + "'";
                      }
                    }
                    return a;
                  }
                },
                {
                  key: '_applyNestingFormatting',
                  value: function(t) {
                    var e =
                      !(arguments.length > 1 && void 0 !== arguments[1]) ||
                      arguments[1];
                    if (
                      t &&
                      'string' == typeof t &&
                      e &&
                      !this.options.rawNesting
                    ) {
                      var r =
                        '(' === t.charAt(0) && ')' === t.charAt(t.length - 1);
                      if (r)
                        for (var n = 0, i = 1; t.length - 1 > ++n; ) {
                          var o = t.charAt(n);
                          if ('(' === o) i++;
                          else if (')' === o && 1 > --i) {
                            r = !1;
                            break;
                          }
                        }
                      r || (t = '(' + t + ')');
                    }
                    return t;
                  }
                },
                {
                  key: '_buildString',
                  value: function(t, e) {
                    var r =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : {},
                      n = r.nested,
                      i = r.buildParameterized,
                      o = r.formattingOptions;
                    (e = e || []), (t = t || '');
                    for (
                      var s = '',
                        a = -1,
                        l = [],
                        c = this.options.parameterCharacter,
                        h = 0;
                      t.length > h;

                    )
                      if (t.substr(h, c.length) === c) {
                        var f = e[++a];
                        if (i)
                          if (d.isSquelBuilder(f)) {
                            var p = f._toParamString({
                              buildParameterized: i,
                              nested: !0
                            });
                            (s += p.text),
                              p.values.forEach(function(t) {
                                return l.push(t);
                              });
                          } else {
                            if (u((f = this._formatValueForParamArray(f, o))))
                              (s +=
                                '(' +
                                f
                                  .map(function() {
                                    return c;
                                  })
                                  .join(', ') +
                                ')'),
                                f.forEach(function(t) {
                                  return l.push(t);
                                });
                            else (s += c), l.push(f);
                          }
                        else s += this._formatValueForQueryString(f, o);
                        h += c.length;
                      } else (s += t.charAt(h)), h++;
                    return {
                      text: this._applyNestingFormatting(s, !!n),
                      values: l
                    };
                  }
                },
                {
                  key: '_buildManyStrings',
                  value: function(t, e) {
                    for (
                      var r =
                          arguments.length > 2 && void 0 !== arguments[2]
                            ? arguments[2]
                            : {},
                        n = [],
                        i = [],
                        o = 0;
                      t.length > o;
                      ++o
                    ) {
                      var s = t[o],
                        a = e[o],
                        l = this._buildString(s, a, {
                          buildParameterized: r.buildParameterized,
                          nested: !1
                        }),
                        u = l.text,
                        c = l.values;
                      n.push(u),
                        c.forEach(function(t) {
                          return i.push(t);
                        });
                    }
                    return {
                      text: (n = n.join(this.options.separator)).length
                        ? this._applyNestingFormatting(n, !!r.nested)
                        : '',
                      values: i
                    };
                  }
                },
                {
                  key: '_toParamString',
                  value: function(t) {
                    throw new Error('Not yet implemented');
                  }
                },
                {
                  key: 'toString',
                  value: function() {
                    var t =
                      arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : {};
                    return this._toParamString(t).text;
                  }
                },
                {
                  key: 'toParam',
                  value: function() {
                    var t =
                      arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : {};
                    return this._toParamString(
                      a({}, t, { buildParameterized: !0 })
                    );
                  }
                }
              ]),
              s
            );
          })()),
          (d.Expression = (function(t) {
            function r(t) {
              o(this, r);
              var e = n(
                this,
                (r.__proto__ || Object.getPrototypeOf(r)).call(this, t)
              );
              return (e._nodes = []), e;
            }
            return (
              i(r, d.BaseBuilder),
              e(r, [
                {
                  key: 'and',
                  value: function(t) {
                    for (
                      var e = arguments.length,
                        r = Array(e > 1 ? e - 1 : 0),
                        n = 1;
                      n < e;
                      n++
                    )
                      r[n - 1] = arguments[n];
                    return (
                      (t = this._sanitizeExpression(t)),
                      this._nodes.push({ type: 'AND', expr: t, para: r }),
                      this
                    );
                  }
                },
                {
                  key: 'or',
                  value: function(t) {
                    for (
                      var e = arguments.length,
                        r = Array(e > 1 ? e - 1 : 0),
                        n = 1;
                      n < e;
                      n++
                    )
                      r[n - 1] = arguments[n];
                    return (
                      (t = this._sanitizeExpression(t)),
                      this._nodes.push({ type: 'OR', expr: t, para: r }),
                      this
                    );
                  }
                },
                {
                  key: '_toParamString',
                  value: function() {
                    var t =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : {},
                      e = [],
                      r = [],
                      n = !0,
                      i = !1,
                      o = void 0;
                    try {
                      for (
                        var s, a = this._nodes[Symbol.iterator]();
                        !(n = (s = a.next()).done);
                        n = !0
                      ) {
                        var l = s.value,
                          u = l.type,
                          c = l.expr,
                          h = l.para,
                          f = d.isSquelBuilder(c)
                            ? c._toParamString({
                                buildParameterized: t.buildParameterized,
                                nested: !0
                              })
                            : this._buildString(c, h, {
                                buildParameterized: t.buildParameterized
                              }),
                          p = f.text,
                          _ = f.values;
                        e.length && e.push(u),
                          e.push(p),
                          _.forEach(function(t) {
                            return r.push(t);
                          });
                      }
                    } catch (t) {
                      (i = !0), (o = t);
                    } finally {
                      try {
                        !n && a.return && a.return();
                      } finally {
                        if (i) throw o;
                      }
                    }
                    return (
                      (e = e.join(' ')),
                      {
                        text: this._applyNestingFormatting(e, !!t.nested),
                        values: r
                      }
                    );
                  }
                }
              ]),
              r
            );
          })()),
          (d.Case = (function(t) {
            function r(t) {
              var e =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : {};
              o(this, r);
              var i = n(
                this,
                (r.__proto__ || Object.getPrototypeOf(r)).call(this, e)
              );
              return (
                l(t) && ((e = t), (t = null)),
                t && (i._fieldName = i._sanitizeField(t)),
                (i.options = a({}, d.DefaultQueryBuilderOptions, e)),
                (i._cases = []),
                (i._elseValue = null),
                i
              );
            }
            return (
              i(r, d.BaseBuilder),
              e(r, [
                {
                  key: 'when',
                  value: function(t) {
                    for (
                      var e = arguments.length,
                        r = Array(e > 1 ? e - 1 : 0),
                        n = 1;
                      n < e;
                      n++
                    )
                      r[n - 1] = arguments[n];
                    return (
                      this._cases.unshift({ expression: t, values: r || [] }),
                      this
                    );
                  }
                },
                {
                  key: 'then',
                  value: function(t) {
                    if (0 == this._cases.length)
                      throw new Error('when() needs to be called first');
                    return (this._cases[0].result = t), this;
                  }
                },
                {
                  key: 'else',
                  value: function(t) {
                    return (this._elseValue = t), this;
                  }
                },
                {
                  key: '_toParamString',
                  value: function() {
                    var t =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : {},
                      e = '',
                      r = [],
                      n = !0,
                      i = !1,
                      o = void 0;
                    try {
                      for (
                        var a, l = this._cases[Symbol.iterator]();
                        !(n = (a = l.next()).done);
                        n = !0
                      ) {
                        var u = a.value,
                          c = u.expression,
                          h = u.values,
                          f = u.result;
                        e = s(e, ' ');
                        var d = this._buildString(c, h, {
                          buildParameterized: t.buildParameterized,
                          nested: !0
                        });
                        (e +=
                          'WHEN ' +
                          d.text +
                          ' THEN ' +
                          this._formatValueForQueryString(f)),
                          d.values.forEach(function(t) {
                            return r.push(t);
                          });
                      }
                    } catch (t) {
                      (i = !0), (o = t);
                    } finally {
                      try {
                        !n && l.return && l.return();
                      } finally {
                        if (i) throw o;
                      }
                    }
                    return (
                      e.length
                        ? ((e +=
                            ' ELSE ' +
                            this._formatValueForQueryString(this._elseValue) +
                            ' END'),
                          this._fieldName && (e = this._fieldName + ' ' + e),
                          (e = 'CASE ' + e))
                        : (e = this._formatValueForQueryString(
                            this._elseValue
                          )),
                      { text: e, values: r }
                    );
                  }
                }
              ]),
              r
            );
          })()),
          (d.Block = (function(t) {
            function r(t) {
              return (
                o(this, r),
                n(this, (r.__proto__ || Object.getPrototypeOf(r)).call(this, t))
              );
            }
            return (
              i(r, d.BaseBuilder),
              e(r, [
                {
                  key: 'exposedMethods',
                  value: function() {
                    for (var t = {}, e = this; e; )
                      Object.getOwnPropertyNames(e).forEach(function(r) {
                        'constructor' === r ||
                          'function' != typeof e[r] ||
                          '_' === r.charAt(0) ||
                          d.Block.prototype[r] ||
                          (t[r] = e[r]);
                      }),
                        (e = Object.getPrototypeOf(e));
                    return t;
                  }
                }
              ]),
              r
            );
          })()),
          (d.StringBlock = (function(t) {
            function r(t, e) {
              o(this, r);
              var i = n(
                this,
                (r.__proto__ || Object.getPrototypeOf(r)).call(this, t)
              );
              return (i._str = e), i;
            }
            return (
              i(r, d.Block),
              e(r, [
                {
                  key: '_toParamString',
                  value: function() {
                    return { text: this._str, values: [] };
                  }
                }
              ]),
              r
            );
          })()),
          (d.FunctionBlock = (function(t) {
            function r(t) {
              o(this, r);
              var e = n(
                this,
                (r.__proto__ || Object.getPrototypeOf(r)).call(this, t)
              );
              return (e._strings = []), (e._values = []), e;
            }
            return (
              i(r, d.Block),
              e(r, [
                {
                  key: 'function',
                  value: function(t) {
                    this._strings.push(t);
                    for (
                      var e = arguments.length,
                        r = Array(e > 1 ? e - 1 : 0),
                        n = 1;
                      n < e;
                      n++
                    )
                      r[n - 1] = arguments[n];
                    this._values.push(r);
                  }
                },
                {
                  key: '_toParamString',
                  value: function() {
                    var t =
                      arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : {};
                    return this._buildManyStrings(
                      this._strings,
                      this._values,
                      t
                    );
                  }
                }
              ]),
              r
            );
          })()),
          d.registerValueHandler(d.FunctionBlock, function(t) {
            return arguments.length > 1 &&
              void 0 !== arguments[1] &&
              arguments[1]
              ? t.toParam()
              : t.toString();
          }),
          (d.AbstractTableBlock = (function(t) {
            function r(t, e) {
              o(this, r);
              var i = n(
                this,
                (r.__proto__ || Object.getPrototypeOf(r)).call(this, t)
              );
              return (i._tables = []), i;
            }
            return (
              i(r, d.Block),
              e(r, [
                {
                  key: '_table',
                  value: function(t) {
                    var e =
                      arguments.length > 1 && void 0 !== arguments[1]
                        ? arguments[1]
                        : null;
                    (e = e ? this._sanitizeTableAlias(e) : e),
                      (t = this._sanitizeTable(t)),
                      this.options.singleTable && (this._tables = []),
                      this._tables.push({ table: t, alias: e });
                  }
                },
                {
                  key: '_hasTable',
                  value: function() {
                    return 0 < this._tables.length;
                  }
                },
                {
                  key: '_toParamString',
                  value: function() {
                    var t =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : {},
                      e = '',
                      r = [];
                    if (this._hasTable()) {
                      var n = !0,
                        i = !1,
                        o = void 0;
                      try {
                        for (
                          var a, l = this._tables[Symbol.iterator]();
                          !(n = (a = l.next()).done);
                          n = !0
                        ) {
                          var u = a.value,
                            c = u.table,
                            h = u.alias;
                          e = s(e, ', ');
                          var f = void 0;
                          if (d.isSquelBuilder(c)) {
                            var p = c._toParamString({
                              buildParameterized: t.buildParameterized,
                              nested: !0
                            });
                            (f = p.text),
                              p.values.forEach(function(t) {
                                return r.push(t);
                              });
                          } else f = this._formatTableName(c);
                          h && (f += ' ' + this._formatTableAlias(h)), (e += f);
                        }
                      } catch (t) {
                        (i = !0), (o = t);
                      } finally {
                        try {
                          !n && l.return && l.return();
                        } finally {
                          if (i) throw o;
                        }
                      }
                      this.options.prefix &&
                        (e = this.options.prefix + ' ' + e);
                    }
                    return { text: e, values: r };
                  }
                }
              ]),
              r
            );
          })()),
          (d.TargetTableBlock = (function(t) {
            function r() {
              return (
                o(this, r),
                n(
                  this,
                  (r.__proto__ || Object.getPrototypeOf(r)).apply(
                    this,
                    arguments
                  )
                )
              );
            }
            return (
              i(r, d.AbstractTableBlock),
              e(r, [
                {
                  key: 'target',
                  value: function(t) {
                    this._table(t);
                  }
                }
              ]),
              r
            );
          })()),
          (d.UpdateTableBlock = (function(r) {
            function s() {
              return (
                o(this, s),
                n(
                  this,
                  (s.__proto__ || Object.getPrototypeOf(s)).apply(
                    this,
                    arguments
                  )
                )
              );
            }
            return (
              i(s, d.AbstractTableBlock),
              e(s, [
                {
                  key: 'table',
                  value: function(t) {
                    var e =
                      arguments.length > 1 && void 0 !== arguments[1]
                        ? arguments[1]
                        : null;
                    this._table(t, e);
                  }
                },
                {
                  key: '_toParamString',
                  value: function() {
                    var e =
                      arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : {};
                    if (!this._hasTable())
                      throw new Error('table() needs to be called');
                    return t(
                      s.prototype.__proto__ ||
                        Object.getPrototypeOf(s.prototype),
                      '_toParamString',
                      this
                    ).call(this, e);
                  }
                }
              ]),
              s
            );
          })()),
          (d.FromTableBlock = (function(t) {
            function r(t) {
              return (
                o(this, r),
                n(
                  this,
                  (r.__proto__ || Object.getPrototypeOf(r)).call(
                    this,
                    a({}, t, { prefix: 'FROM' })
                  )
                )
              );
            }
            return (
              i(r, d.AbstractTableBlock),
              e(r, [
                {
                  key: 'from',
                  value: function(t) {
                    var e =
                      arguments.length > 1 && void 0 !== arguments[1]
                        ? arguments[1]
                        : null;
                    this._table(t, e);
                  }
                }
              ]),
              r
            );
          })()),
          (d.IntoTableBlock = (function(r) {
            function s(t) {
              return (
                o(this, s),
                n(
                  this,
                  (s.__proto__ || Object.getPrototypeOf(s)).call(
                    this,
                    a({}, t, { prefix: 'INTO', singleTable: !0 })
                  )
                )
              );
            }
            return (
              i(s, d.AbstractTableBlock),
              e(s, [
                {
                  key: 'into',
                  value: function(t) {
                    this._table(t);
                  }
                },
                {
                  key: '_toParamString',
                  value: function() {
                    var e =
                      arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : {};
                    if (!this._hasTable())
                      throw new Error('into() needs to be called');
                    return t(
                      s.prototype.__proto__ ||
                        Object.getPrototypeOf(s.prototype),
                      '_toParamString',
                      this
                    ).call(this, e);
                  }
                }
              ]),
              s
            );
          })()),
          (d.GetFieldBlock = (function(t) {
            function r(t) {
              o(this, r);
              var e = n(
                this,
                (r.__proto__ || Object.getPrototypeOf(r)).call(this, t)
              );
              return (e._fields = []), e;
            }
            return (
              i(r, d.Block),
              e(r, [
                {
                  key: 'fields',
                  value: function(t) {
                    var e =
                      arguments.length > 1 && void 0 !== arguments[1]
                        ? arguments[1]
                        : {};
                    if (u(t)) {
                      var r = !0,
                        n = !1,
                        i = void 0;
                      try {
                        for (
                          var o, s = t[Symbol.iterator]();
                          !(r = (o = s.next()).done);
                          r = !0
                        ) {
                          var a = o.value;
                          this.field(a, null, e);
                        }
                      } catch (t) {
                        (n = !0), (i = t);
                      } finally {
                        try {
                          !r && s.return && s.return();
                        } finally {
                          if (n) throw i;
                        }
                      }
                    } else
                      for (var l in t) {
                        var c = t[l];
                        this.field(l, c, e);
                      }
                  }
                },
                {
                  key: 'field',
                  value: function(t) {
                    var e =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : null,
                      r =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : {};
                    if (
                      ((e = e ? this._sanitizeFieldAlias(e) : e),
                      (t = this._sanitizeField(t)),
                      this._fields.filter(function(r) {
                        return r.name === t && r.alias === e;
                      }).length)
                    )
                      return this;
                    this._fields.push({ name: t, alias: e, options: r });
                  }
                },
                {
                  key: '_toParamString',
                  value: function() {
                    var t =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : {},
                      e = t.queryBuilder,
                      r = t.buildParameterized,
                      n = '',
                      i = [],
                      o = !0,
                      a = !1,
                      l = void 0;
                    try {
                      for (
                        var u, c = this._fields[Symbol.iterator]();
                        !(o = (u = c.next()).done);
                        o = !0
                      ) {
                        var h = u.value;
                        n = s(n, ', ');
                        var f = h.name,
                          p = h.alias,
                          _ = h.options;
                        if ('string' == typeof f)
                          n += this._formatFieldName(f, _);
                        else {
                          var y = f._toParamString({
                            nested: !0,
                            buildParameterized: r
                          });
                          (n += y.text),
                            y.values.forEach(function(t) {
                              return i.push(t);
                            });
                        }
                        p && (n += ' AS ' + this._formatFieldAlias(p));
                      }
                    } catch (t) {
                      (a = !0), (l = t);
                    } finally {
                      try {
                        !o && c.return && c.return();
                      } finally {
                        if (a) throw l;
                      }
                    }
                    if (!n.length) {
                      var v = e && e.getBlock(d.FromTableBlock);
                      v && v._hasTable() && (n = '*');
                    }
                    return { text: n, values: i };
                  }
                }
              ]),
              r
            );
          })()),
          (d.AbstractSetFieldBlock = (function(t) {
            function s(t) {
              o(this, s);
              var e = n(
                this,
                (s.__proto__ || Object.getPrototypeOf(s)).call(this, t)
              );
              return e._reset(), e;
            }
            return (
              i(s, d.Block),
              e(s, [
                {
                  key: '_reset',
                  value: function() {
                    (this._fields = []),
                      (this._values = [[]]),
                      (this._valueOptions = [[]]);
                  }
                },
                {
                  key: '_set',
                  value: function(t, e) {
                    var r =
                      arguments.length > 2 && void 0 !== arguments[2]
                        ? arguments[2]
                        : {};
                    if (this._values.length > 1)
                      throw new Error(
                        'Cannot set multiple rows of fields this way.'
                      );
                    void 0 !== e && (e = this._sanitizeValue(e)),
                      (t = this._sanitizeField(t));
                    var n = this._fields.indexOf(t);
                    -1 === n &&
                      (this._fields.push(t), (n = this._fields.length - 1)),
                      (this._values[0][n] = e),
                      (this._valueOptions[0][n] = r);
                  }
                },
                {
                  key: '_setFields',
                  value: function(t) {
                    var e =
                      arguments.length > 1 && void 0 !== arguments[1]
                        ? arguments[1]
                        : {};
                    if ('object' !== (void 0 === t ? 'undefined' : r(t)))
                      throw new Error(
                        'Expected an object but got ' +
                          (void 0 === t ? 'undefined' : r(t))
                      );
                    for (var n in t) this._set(n, t[n], e);
                  }
                },
                {
                  key: '_setFieldsRows',
                  value: function(t) {
                    var e =
                      arguments.length > 1 && void 0 !== arguments[1]
                        ? arguments[1]
                        : {};
                    if (!u(t))
                      throw new Error(
                        'Expected an array of objects but got ' +
                          (void 0 === t ? 'undefined' : r(t))
                      );
                    this._reset();
                    for (var n = 0; t.length > n; ++n) {
                      var i = t[n];
                      for (var o in i) {
                        var s = i[o];
                        (o = this._sanitizeField(o)),
                          (s = this._sanitizeValue(s));
                        var a = this._fields.indexOf(o);
                        if (0 < n && -1 === a)
                          throw new Error(
                            'All fields in subsequent rows must match the fields in the first row'
                          );
                        -1 === a &&
                          (this._fields.push(o), (a = this._fields.length - 1)),
                          u(this._values[n]) ||
                            ((this._values[n] = []),
                            (this._valueOptions[n] = [])),
                          (this._values[n][a] = s),
                          (this._valueOptions[n][a] = e);
                      }
                    }
                  }
                }
              ]),
              s
            );
          })()),
          (d.SetFieldBlock = (function(t) {
            function r() {
              return (
                o(this, r),
                n(
                  this,
                  (r.__proto__ || Object.getPrototypeOf(r)).apply(
                    this,
                    arguments
                  )
                )
              );
            }
            return (
              i(r, d.AbstractSetFieldBlock),
              e(r, [
                {
                  key: 'set',
                  value: function(t, e, r) {
                    this._set(t, e, r);
                  }
                },
                {
                  key: 'setFields',
                  value: function(t, e) {
                    this._setFields(t, e);
                  }
                },
                {
                  key: '_toParamString',
                  value: function() {
                    var t = (arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : {}
                    ).buildParameterized;
                    if (0 >= this._fields.length)
                      throw new Error('set() needs to be called');
                    for (
                      var e = '', r = [], n = 0;
                      n < this._fields.length;
                      ++n
                    ) {
                      e = s(e, ', ');
                      var i = this._formatFieldName(this._fields[n]),
                        o = this._values[0][n];
                      0 > i.indexOf('=') &&
                        (i = i + ' = ' + this.options.parameterCharacter);
                      var a = this._buildString(i, [o], {
                        buildParameterized: t,
                        formattingOptions: this._valueOptions[0][n]
                      });
                      (e += a.text),
                        a.values.forEach(function(t) {
                          return r.push(t);
                        });
                    }
                    return { text: 'SET ' + e, values: r };
                  }
                }
              ]),
              r
            );
          })()),
          (d.InsertFieldValueBlock = (function(t) {
            function r() {
              return (
                o(this, r),
                n(
                  this,
                  (r.__proto__ || Object.getPrototypeOf(r)).apply(
                    this,
                    arguments
                  )
                )
              );
            }
            return (
              i(r, d.AbstractSetFieldBlock),
              e(r, [
                {
                  key: 'set',
                  value: function(t, e) {
                    var r =
                      arguments.length > 2 && void 0 !== arguments[2]
                        ? arguments[2]
                        : {};
                    this._set(t, e, r);
                  }
                },
                {
                  key: 'setFields',
                  value: function(t, e) {
                    this._setFields(t, e);
                  }
                },
                {
                  key: 'setFieldsRows',
                  value: function(t, e) {
                    this._setFieldsRows(t, e);
                  }
                },
                {
                  key: '_toParamString',
                  value: function() {
                    for (
                      var t = this,
                        e = (arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : {}
                        ).buildParameterized,
                        r = this._fields
                          .map(function(e) {
                            return t._formatFieldName(e);
                          })
                          .join(', '),
                        n = [],
                        i = [],
                        o = 0;
                      o < this._values.length;
                      ++o
                    ) {
                      n[o] = '';
                      for (var a = 0; a < this._values[o].length; ++a) {
                        var l = this._buildString(
                          this.options.parameterCharacter,
                          [this._values[o][a]],
                          {
                            buildParameterized: e,
                            formattingOptions: this._valueOptions[o][a]
                          }
                        );
                        l.values.forEach(function(t) {
                          return i.push(t);
                        }),
                          (n[o] = s(n[o], ', ')),
                          (n[o] += l.text);
                      }
                    }
                    return {
                      text: r.length
                        ? '(' + r + ') VALUES (' + n.join('), (') + ')'
                        : '',
                      values: i
                    };
                  }
                }
              ]),
              r
            );
          })()),
          (d.InsertFieldsFromQueryBlock = (function(t) {
            function r(t) {
              o(this, r);
              var e = n(
                this,
                (r.__proto__ || Object.getPrototypeOf(r)).call(this, t)
              );
              return (e._fields = []), (e._query = null), e;
            }
            return (
              i(r, d.Block),
              e(r, [
                {
                  key: 'fromQuery',
                  value: function(t, e) {
                    var r = this;
                    (this._fields = t.map(function(t) {
                      return r._sanitizeField(t);
                    })),
                      (this._query = this._sanitizeBaseBuilder(e));
                  }
                },
                {
                  key: '_toParamString',
                  value: function() {
                    var t =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : {},
                      e = '',
                      r = [];
                    if (this._fields.length && this._query) {
                      var n = this._query._toParamString({
                          buildParameterized: t.buildParameterized,
                          nested: !0
                        }),
                        i = n.text,
                        o = n.values;
                      (e =
                        '(' +
                        this._fields.join(', ') +
                        ') ' +
                        this._applyNestingFormatting(i)),
                        (r = o);
                    }
                    return { text: e, values: r };
                  }
                }
              ]),
              r
            );
          })()),
          (d.DistinctBlock = (function(t) {
            function r() {
              return (
                o(this, r),
                n(
                  this,
                  (r.__proto__ || Object.getPrototypeOf(r)).apply(
                    this,
                    arguments
                  )
                )
              );
            }
            return (
              i(r, d.Block),
              e(r, [
                {
                  key: 'distinct',
                  value: function() {
                    this._useDistinct = !0;
                  }
                },
                {
                  key: '_toParamString',
                  value: function() {
                    return {
                      text: this._useDistinct ? 'DISTINCT' : '',
                      values: []
                    };
                  }
                }
              ]),
              r
            );
          })()),
          (d.GroupByBlock = (function(t) {
            function r(t) {
              o(this, r);
              var e = n(
                this,
                (r.__proto__ || Object.getPrototypeOf(r)).call(this, t)
              );
              return (e._groups = []), e;
            }
            return (
              i(r, d.Block),
              e(r, [
                {
                  key: 'group',
                  value: function(t) {
                    this._groups.push(this._sanitizeField(t));
                  }
                },
                {
                  key: '_toParamString',
                  value: function() {
                    return {
                      text: this._groups.length
                        ? 'GROUP BY ' + this._groups.join(', ')
                        : '',
                      values: []
                    };
                  }
                }
              ]),
              r
            );
          })()),
          (d.AbstractVerbSingleValueBlock = (function(t) {
            function r(t) {
              o(this, r);
              var e = n(
                this,
                (r.__proto__ || Object.getPrototypeOf(r)).call(this, t)
              );
              return (e._value = null), e;
            }
            return (
              i(r, d.Block),
              e(r, [
                {
                  key: '_setValue',
                  value: function(t) {
                    this._value = null !== t ? this._sanitizeLimitOffset(t) : t;
                  }
                },
                {
                  key: '_toParamString',
                  value: function() {
                    var t =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : {},
                      e =
                        null !== this._value
                          ? this.options.verb +
                            ' ' +
                            this.options.parameterCharacter
                          : '',
                      r = null !== this._value ? [this._value] : [];
                    return this._buildString(e, r, t);
                  }
                }
              ]),
              r
            );
          })()),
          (d.OffsetBlock = (function(t) {
            function r(t) {
              return (
                o(this, r),
                n(
                  this,
                  (r.__proto__ || Object.getPrototypeOf(r)).call(
                    this,
                    a({}, t, { verb: 'OFFSET' })
                  )
                )
              );
            }
            return (
              i(r, d.AbstractVerbSingleValueBlock),
              e(r, [
                {
                  key: 'offset',
                  value: function(t) {
                    this._setValue(t);
                  }
                }
              ]),
              r
            );
          })()),
          (d.LimitBlock = (function(t) {
            function r(t) {
              return (
                o(this, r),
                n(
                  this,
                  (r.__proto__ || Object.getPrototypeOf(r)).call(
                    this,
                    a({}, t, { verb: 'LIMIT' })
                  )
                )
              );
            }
            return (
              i(r, d.AbstractVerbSingleValueBlock),
              e(r, [
                {
                  key: 'limit',
                  value: function(t) {
                    this._setValue(t);
                  }
                }
              ]),
              r
            );
          })()),
          (d.AbstractConditionBlock = (function(t) {
            function r(t) {
              o(this, r);
              var e = n(
                this,
                (r.__proto__ || Object.getPrototypeOf(r)).call(this, t)
              );
              return (e._conditions = []), e;
            }
            return (
              i(r, d.Block),
              e(r, [
                {
                  key: '_condition',
                  value: function(t) {
                    t = this._sanitizeExpression(t);
                    for (
                      var e = arguments.length,
                        r = Array(e > 1 ? e - 1 : 0),
                        n = 1;
                      n < e;
                      n++
                    )
                      r[n - 1] = arguments[n];
                    this._conditions.push({ expr: t, values: r || [] });
                  }
                },
                {
                  key: '_toParamString',
                  value: function() {
                    var t =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : {},
                      e = [],
                      r = [],
                      n = !0,
                      i = !1,
                      o = void 0;
                    try {
                      for (
                        var s, a = this._conditions[Symbol.iterator]();
                        !(n = (s = a.next()).done);
                        n = !0
                      ) {
                        var l = s.value,
                          u = l.expr,
                          c = l.values,
                          h = d.isSquelBuilder(u)
                            ? u._toParamString({
                                buildParameterized: t.buildParameterized
                              })
                            : this._buildString(u, c, {
                                buildParameterized: t.buildParameterized
                              });
                        h.text.length && e.push(h.text),
                          h.values.forEach(function(t) {
                            return r.push(t);
                          });
                      }
                    } catch (t) {
                      (i = !0), (o = t);
                    } finally {
                      try {
                        !n && a.return && a.return();
                      } finally {
                        if (i) throw o;
                      }
                    }
                    return (
                      e.length && (e = e.join(') AND (')),
                      {
                        text: e.length
                          ? this.options.verb + ' (' + e + ')'
                          : '',
                        values: r
                      }
                    );
                  }
                }
              ]),
              r
            );
          })()),
          (d.WhereBlock = (function(t) {
            function r(t) {
              return (
                o(this, r),
                n(
                  this,
                  (r.__proto__ || Object.getPrototypeOf(r)).call(
                    this,
                    a({}, t, { verb: 'WHERE' })
                  )
                )
              );
            }
            return (
              i(r, d.AbstractConditionBlock),
              e(r, [
                {
                  key: 'where',
                  value: function(t) {
                    for (
                      var e = arguments.length,
                        r = Array(e > 1 ? e - 1 : 0),
                        n = 1;
                      n < e;
                      n++
                    )
                      r[n - 1] = arguments[n];
                    this._condition.apply(this, [t].concat(r));
                  }
                }
              ]),
              r
            );
          })()),
          (d.HavingBlock = (function(t) {
            function r(t) {
              return (
                o(this, r),
                n(
                  this,
                  (r.__proto__ || Object.getPrototypeOf(r)).call(
                    this,
                    a({}, t, { verb: 'HAVING' })
                  )
                )
              );
            }
            return (
              i(r, d.AbstractConditionBlock),
              e(r, [
                {
                  key: 'having',
                  value: function(t) {
                    for (
                      var e = arguments.length,
                        r = Array(e > 1 ? e - 1 : 0),
                        n = 1;
                      n < e;
                      n++
                    )
                      r[n - 1] = arguments[n];
                    this._condition.apply(this, [t].concat(r));
                  }
                }
              ]),
              r
            );
          })()),
          (d.OrderByBlock = (function(t) {
            function r(t) {
              o(this, r);
              var e = n(
                this,
                (r.__proto__ || Object.getPrototypeOf(r)).call(this, t)
              );
              return (e._orders = []), e;
            }
            return (
              i(r, d.Block),
              e(r, [
                {
                  key: 'order',
                  value: function(t, e) {
                    (t = this._sanitizeField(t)),
                      'string' != typeof e &&
                        (void 0 === e
                          ? (e = 'ASC')
                          : null !== e && (e = e ? 'ASC' : 'DESC'));
                    for (
                      var r = arguments.length,
                        n = Array(r > 2 ? r - 2 : 0),
                        i = 2;
                      i < r;
                      i++
                    )
                      n[i - 2] = arguments[i];
                    this._orders.push({ field: t, dir: e, values: n || [] });
                  }
                },
                {
                  key: '_toParamString',
                  value: function() {
                    var t =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : {},
                      e = '',
                      r = [],
                      n = !0,
                      i = !1,
                      o = void 0;
                    try {
                      for (
                        var a, l = this._orders[Symbol.iterator]();
                        !(n = (a = l.next()).done);
                        n = !0
                      ) {
                        var c = a.value,
                          h = c.field,
                          f = c.dir,
                          d = c.values;
                        e = s(e, ', ');
                        var p = this._buildString(h, d, {
                          buildParameterized: t.buildParameterized
                        });
                        (e += p.text),
                          u(p.values) &&
                            p.values.forEach(function(t) {
                              return r.push(t);
                            }),
                          null !== f && (e += ' ' + f);
                      }
                    } catch (t) {
                      (i = !0), (o = t);
                    } finally {
                      try {
                        !n && l.return && l.return();
                      } finally {
                        if (i) throw o;
                      }
                    }
                    return { text: e.length ? 'ORDER BY ' + e : '', values: r };
                  }
                }
              ]),
              r
            );
          })()),
          (d.JoinBlock = (function(t) {
            function r(t) {
              o(this, r);
              var e = n(
                this,
                (r.__proto__ || Object.getPrototypeOf(r)).call(this, t)
              );
              return (e._joins = []), e;
            }
            return (
              i(r, d.Block),
              e(r, [
                {
                  key: 'join',
                  value: function(t) {
                    var e =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : null,
                      r =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : null,
                      n =
                        arguments.length > 3 && void 0 !== arguments[3]
                          ? arguments[3]
                          : 'INNER';
                    (t = this._sanitizeTable(t, !0)),
                      (e = e ? this._sanitizeTableAlias(e) : e),
                      (r = r ? this._sanitizeExpression(r) : r),
                      this._joins.push({
                        type: n,
                        table: t,
                        alias: e,
                        condition: r
                      });
                  }
                },
                {
                  key: 'left_join',
                  value: function(t) {
                    var e =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : null,
                      r =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : null;
                    this.join(t, e, r, 'LEFT');
                  }
                },
                {
                  key: 'right_join',
                  value: function(t) {
                    var e =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : null,
                      r =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : null;
                    this.join(t, e, r, 'RIGHT');
                  }
                },
                {
                  key: 'outer_join',
                  value: function(t) {
                    var e =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : null,
                      r =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : null;
                    this.join(t, e, r, 'OUTER');
                  }
                },
                {
                  key: 'left_outer_join',
                  value: function(t) {
                    var e =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : null,
                      r =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : null;
                    this.join(t, e, r, 'LEFT OUTER');
                  }
                },
                {
                  key: 'full_join',
                  value: function(t) {
                    var e =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : null,
                      r =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : null;
                    this.join(t, e, r, 'FULL');
                  }
                },
                {
                  key: 'cross_join',
                  value: function(t) {
                    var e =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : null,
                      r =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : null;
                    this.join(t, e, r, 'CROSS');
                  }
                },
                {
                  key: '_toParamString',
                  value: function() {
                    var t =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : {},
                      e = '',
                      r = [],
                      n = !0,
                      i = !1,
                      o = void 0;
                    try {
                      for (
                        var a, l = this._joins[Symbol.iterator]();
                        !(n = (a = l.next()).done);
                        n = !0
                      ) {
                        var u = a.value,
                          c = u.type,
                          h = u.table,
                          f = u.alias,
                          p = u.condition;
                        e = s(e, this.options.separator);
                        var _ = void 0;
                        if (d.isSquelBuilder(h)) {
                          var y = h._toParamString({
                            buildParameterized: t.buildParameterized,
                            nested: !0
                          });
                          y.values.forEach(function(t) {
                            return r.push(t);
                          }),
                            (_ = y.text);
                        } else _ = this._formatTableName(h);
                        if (
                          ((e += c + ' JOIN ' + _),
                          f && (e += ' ' + this._formatTableAlias(f)),
                          p)
                        ) {
                          e += ' ON ';
                          var v = void 0;
                          (v = d.isSquelBuilder(p)
                            ? p._toParamString({
                                buildParameterized: t.buildParameterized
                              })
                            : this._buildString(p, [], {
                                buildParameterized: t.buildParameterized
                              })),
                            (e += this._applyNestingFormatting(v.text)),
                            v.values.forEach(function(t) {
                              return r.push(t);
                            });
                        }
                      }
                    } catch (t) {
                      (i = !0), (o = t);
                    } finally {
                      try {
                        !n && l.return && l.return();
                      } finally {
                        if (i) throw o;
                      }
                    }
                    return { text: e, values: r };
                  }
                }
              ]),
              r
            );
          })()),
          (d.UnionBlock = (function(t) {
            function r(t) {
              o(this, r);
              var e = n(
                this,
                (r.__proto__ || Object.getPrototypeOf(r)).call(this, t)
              );
              return (e._unions = []), e;
            }
            return (
              i(r, d.Block),
              e(r, [
                {
                  key: 'union',
                  value: function(t) {
                    var e =
                      arguments.length > 1 && void 0 !== arguments[1]
                        ? arguments[1]
                        : 'UNION';
                    (t = this._sanitizeTable(t)),
                      this._unions.push({ type: e, table: t });
                  }
                },
                {
                  key: 'union_all',
                  value: function(t) {
                    this.union(t, 'UNION ALL');
                  }
                },
                {
                  key: '_toParamString',
                  value: function() {
                    var t =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : {},
                      e = '',
                      r = [],
                      n = !0,
                      i = !1,
                      o = void 0;
                    try {
                      for (
                        var a, l = this._unions[Symbol.iterator]();
                        !(n = (a = l.next()).done);
                        n = !0
                      ) {
                        var u = a.value,
                          c = u.type,
                          h = u.table;
                        e = s(e, this.options.separator);
                        var f = void 0;
                        if (h instanceof d.BaseBuilder) {
                          var p = h._toParamString({
                            buildParameterized: t.buildParameterized,
                            nested: !0
                          });
                          (f = p.text),
                            p.values.forEach(function(t) {
                              return r.push(t);
                            });
                        } else e = this._formatTableName(h);
                        e += c + ' ' + f;
                      }
                    } catch (t) {
                      (i = !0), (o = t);
                    } finally {
                      try {
                        !n && l.return && l.return();
                      } finally {
                        if (i) throw o;
                      }
                    }
                    return { text: e, values: r };
                  }
                }
              ]),
              r
            );
          })()),
          (d.QueryBuilder = (function(r) {
            function s(t, e) {
              o(this, s);
              var r = n(
                this,
                (s.__proto__ || Object.getPrototypeOf(s)).call(this, t)
              );
              r.blocks = e || [];
              var i = !0,
                a = !1,
                l = void 0;
              try {
                for (
                  var u, c = r.blocks[Symbol.iterator]();
                  !(i = (u = c.next()).done);
                  i = !0
                ) {
                  var h = u.value,
                    f = h.exposedMethods();
                  for (var d in f) {
                    var p = f[d];
                    if (void 0 !== r[d])
                      throw new Error(
                        'Builder already has a builder method called: ' + d
                      );
                    !(function(t, e, n) {
                      r[d] = function() {
                        for (
                          var e = arguments.length, i = Array(e), o = 0;
                          o < e;
                          o++
                        )
                          i[o] = arguments[o];
                        return n.call.apply(n, [t].concat(i)), r;
                      };
                    })(h, 0, p);
                  }
                }
              } catch (t) {
                (a = !0), (l = t);
              } finally {
                try {
                  !i && c.return && c.return();
                } finally {
                  if (a) throw l;
                }
              }
              return r;
            }
            return (
              i(s, d.BaseBuilder),
              e(s, [
                {
                  key: 'registerValueHandler',
                  value: function(e, r) {
                    var n = !0,
                      i = !1,
                      o = void 0;
                    try {
                      for (
                        var a, l = this.blocks[Symbol.iterator]();
                        !(n = (a = l.next()).done);
                        n = !0
                      ) {
                        a.value.registerValueHandler(e, r);
                      }
                    } catch (t) {
                      (i = !0), (o = t);
                    } finally {
                      try {
                        !n && l.return && l.return();
                      } finally {
                        if (i) throw o;
                      }
                    }
                    return (
                      t(
                        s.prototype.__proto__ ||
                          Object.getPrototypeOf(s.prototype),
                        'registerValueHandler',
                        this
                      ).call(this, e, r),
                      this
                    );
                  }
                },
                {
                  key: 'updateOptions',
                  value: function(t) {
                    this.options = a({}, this.options, t);
                    var e = !0,
                      r = !1,
                      n = void 0;
                    try {
                      for (
                        var i, o = this.blocks[Symbol.iterator]();
                        !(e = (i = o.next()).done);
                        e = !0
                      ) {
                        var s = i.value;
                        s.options = a({}, s.options, t);
                      }
                    } catch (t) {
                      (r = !0), (n = t);
                    } finally {
                      try {
                        !e && o.return && o.return();
                      } finally {
                        if (r) throw n;
                      }
                    }
                  }
                },
                {
                  key: '_toParamString',
                  value: function() {
                    var t = this,
                      e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : {};
                    e = a({}, this.options, e);
                    var r = this.blocks.map(function(r) {
                        return r._toParamString({
                          buildParameterized: e.buildParameterized,
                          queryBuilder: t
                        });
                      }),
                      n = r.map(function(t) {
                        return t.text;
                      }),
                      i = r.map(function(t) {
                        return t.values;
                      }),
                      o = n
                        .filter(function(t) {
                          return 0 < t.length;
                        })
                        .join(e.separator),
                      s = [];
                    if (
                      (i.forEach(function(t) {
                        return t.forEach(function(t) {
                          return s.push(t);
                        });
                      }),
                      !e.nested && e.numberedParameters)
                    ) {
                      var l =
                          void 0 !== e.numberedParametersStartAt
                            ? e.numberedParametersStartAt
                            : 1,
                        u = e.parameterCharacter.replace(
                          /[-[\]{}()*+?.,\\^$|#\s]/g,
                          '\\$&'
                        );
                      o = o.replace(new RegExp(u, 'g'), function() {
                        return '' + e.numberedParametersPrefix + l++;
                      });
                    }
                    return {
                      text: this._applyNestingFormatting(o, !!e.nested),
                      values: s
                    };
                  }
                },
                {
                  key: 'clone',
                  value: function() {
                    var t = this.blocks.map(function(t) {
                      return t.clone();
                    });
                    return new this.constructor(this.options, t);
                  }
                },
                {
                  key: 'getBlock',
                  value: function(t) {
                    return this.blocks.filter(function(e) {
                      return e instanceof t;
                    })[0];
                  }
                }
              ]),
              s
            );
          })()),
          (d.Select = (function(t) {
            function e(t) {
              var r =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : null;
              return (
                o(this, e),
                (r = r || [
                  new d.StringBlock(t, 'SELECT'),
                  new d.FunctionBlock(t),
                  new d.DistinctBlock(t),
                  new d.GetFieldBlock(t),
                  new d.FromTableBlock(t),
                  new d.JoinBlock(t),
                  new d.WhereBlock(t),
                  new d.GroupByBlock(t),
                  new d.HavingBlock(t),
                  new d.OrderByBlock(t),
                  new d.LimitBlock(t),
                  new d.OffsetBlock(t),
                  new d.UnionBlock(t)
                ]),
                n(
                  this,
                  (e.__proto__ || Object.getPrototypeOf(e)).call(this, t, r)
                )
              );
            }
            return i(e, d.QueryBuilder), e;
          })()),
          (d.Update = (function(t) {
            function e(t) {
              var r =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : null;
              return (
                o(this, e),
                (r = r || [
                  new d.StringBlock(t, 'UPDATE'),
                  new d.UpdateTableBlock(t),
                  new d.SetFieldBlock(t),
                  new d.WhereBlock(t),
                  new d.OrderByBlock(t),
                  new d.LimitBlock(t)
                ]),
                n(
                  this,
                  (e.__proto__ || Object.getPrototypeOf(e)).call(this, t, r)
                )
              );
            }
            return i(e, d.QueryBuilder), e;
          })()),
          (d.Delete = (function(t) {
            function e(t) {
              var r =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : null;
              return (
                o(this, e),
                (r = r || [
                  new d.StringBlock(t, 'DELETE'),
                  new d.TargetTableBlock(t),
                  new d.FromTableBlock(a({}, t, { singleTable: !0 })),
                  new d.JoinBlock(t),
                  new d.WhereBlock(t),
                  new d.OrderByBlock(t),
                  new d.LimitBlock(t)
                ]),
                n(
                  this,
                  (e.__proto__ || Object.getPrototypeOf(e)).call(this, t, r)
                )
              );
            }
            return i(e, d.QueryBuilder), e;
          })()),
          (d.Insert = (function(t) {
            function e(t) {
              var r =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : null;
              return (
                o(this, e),
                (r = r || [
                  new d.StringBlock(t, 'INSERT'),
                  new d.IntoTableBlock(t),
                  new d.InsertFieldValueBlock(t),
                  new d.InsertFieldsFromQueryBlock(t)
                ]),
                n(
                  this,
                  (e.__proto__ || Object.getPrototypeOf(e)).call(this, t, r)
                )
              );
            }
            return i(e, d.QueryBuilder), e;
          })());
        var _ = {
          VERSION: '5.12.0',
          flavour: f,
          expr: function(t) {
            return new d.Expression(t);
          },
          case: function(t, e) {
            return new d.Case(t, e);
          },
          select: function(t, e) {
            return new d.Select(t, e);
          },
          update: function(t, e) {
            return new d.Update(t, e);
          },
          insert: function(t, e) {
            return new d.Insert(t, e);
          },
          delete: function(t, e) {
            return new d.Delete(t, e);
          },
          str: function() {
            var t = new d.FunctionBlock();
            return t.function.apply(t, arguments), t;
          },
          rstr: function() {
            var t = new d.FunctionBlock({ rawNesting: !0 });
            return t.function.apply(t, arguments), t;
          },
          registerValueHandler: d.registerValueHandler
        };
        return (_.remove = _.delete), (_.cls = d), _;
      }
      var p = d();
      return (
        (p.flavours = {}),
        (p.useFlavour = function() {
          var t =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : null;
          if (!t) return p;
          if (p.flavours[t] instanceof Function) {
            var e = d(t);
            return (
              p.flavours[t].call(null, e),
              (e.flavours = p.flavours),
              (e.useFlavour = p.useFlavour),
              e
            );
          }
          throw new Error('Flavour not available: ' + t);
        }),
        (p.flavours.mssql = function(r) {
          var l = r.cls;
          (l.DefaultQueryBuilderOptions.replaceSingleQuotes = !0),
            (l.DefaultQueryBuilderOptions.autoQuoteAliasNames = !1),
            (l.DefaultQueryBuilderOptions.numberedParametersPrefix = '@'),
            r.registerValueHandler(Date, function(t) {
              return (
                "'" +
                t.getUTCFullYear() +
                '-' +
                (t.getUTCMonth() + 1) +
                '-' +
                t.getUTCDate() +
                ' ' +
                t.getUTCHours() +
                ':' +
                t.getUTCMinutes() +
                ':' +
                t.getUTCSeconds() +
                "'"
              );
            }),
            (l.MssqlLimitOffsetTopBlock = (function(t) {
              function r(t) {
                o(this, r);
                var s = n(
                  this,
                  (r.__proto__ || Object.getPrototypeOf(r)).call(this, t)
                );
                (s._limits = null), (s._offsets = null);
                var a = function(t) {
                  (t = this._sanitizeLimitOffset(t)),
                    (this._parent._limits = t);
                };
                return (
                  (s.ParentBlock = (function(t) {
                    function e(t) {
                      o(this, e);
                      var r = n(
                        this,
                        (e.__proto__ || Object.getPrototypeOf(e)).call(
                          this,
                          t.options
                        )
                      );
                      return (r._parent = t), r;
                    }
                    return i(e, l.Block), e;
                  })()),
                  (s.LimitBlock = (function(t) {
                    function r(t) {
                      o(this, r);
                      var e = n(
                        this,
                        (r.__proto__ || Object.getPrototypeOf(r)).call(this, t)
                      );
                      return (e.limit = a), e;
                    }
                    return (
                      i(r, s.ParentBlock),
                      e(r, [
                        {
                          key: '_toParamString',
                          value: function() {
                            var t = '';
                            return (
                              this._parent._limits &&
                                this._parent._offsets &&
                                (t =
                                  'FETCH NEXT ' +
                                  this._parent._limits +
                                  ' ROWS ONLY'),
                              { text: t, values: [] }
                            );
                          }
                        }
                      ]),
                      r
                    );
                  })()),
                  (s.TopBlock = (function(t) {
                    function r(t) {
                      o(this, r);
                      var e = n(
                        this,
                        (r.__proto__ || Object.getPrototypeOf(r)).call(this, t)
                      );
                      return (e.top = a), e;
                    }
                    return (
                      i(r, s.ParentBlock),
                      e(r, [
                        {
                          key: '_toParamString',
                          value: function() {
                            var t = '';
                            return (
                              this._parent._limits &&
                                !this._parent._offsets &&
                                (t = 'TOP (' + this._parent._limits + ')'),
                              { text: t, values: [] }
                            );
                          }
                        }
                      ]),
                      r
                    );
                  })()),
                  (s.OffsetBlock = (function(t) {
                    function r() {
                      return (
                        o(this, r),
                        n(
                          this,
                          (r.__proto__ || Object.getPrototypeOf(r)).apply(
                            this,
                            arguments
                          )
                        )
                      );
                    }
                    return (
                      i(r, s.ParentBlock),
                      e(r, [
                        {
                          key: 'offset',
                          value: function(t) {
                            this._parent._offsets = this._sanitizeLimitOffset(
                              t
                            );
                          }
                        },
                        {
                          key: '_toParamString',
                          value: function() {
                            var t = '';
                            return (
                              this._parent._offsets &&
                                (t =
                                  'OFFSET ' + this._parent._offsets + ' ROWS'),
                              { text: t, values: [] }
                            );
                          }
                        }
                      ]),
                      r
                    );
                  })()),
                  s
                );
              }
              return (
                i(r, l.Block),
                e(r, [
                  {
                    key: 'LIMIT',
                    value: function() {
                      return new this.LimitBlock(this);
                    }
                  },
                  {
                    key: 'TOP',
                    value: function() {
                      return new this.TopBlock(this);
                    }
                  },
                  {
                    key: 'OFFSET',
                    value: function() {
                      return new this.OffsetBlock(this);
                    }
                  }
                ]),
                r
              );
            })()),
            (l.MssqlUpdateTopBlock = (function(t) {
              function r(t) {
                o(this, r);
                var e = n(
                  this,
                  (r.__proto__ || Object.getPrototypeOf(r)).call(this, t)
                );
                return (
                  (e._limits = null),
                  (e.limit = e.top = function(t) {
                    e._limits = e._sanitizeLimitOffset(t);
                  }),
                  e
                );
              }
              return (
                i(r, l.Block),
                e(r, [
                  {
                    key: '_toParamString',
                    value: function() {
                      return {
                        text: this._limits ? 'TOP (' + this._limits + ')' : '',
                        values: []
                      };
                    }
                  }
                ]),
                r
              );
            })()),
            (l.MssqlInsertFieldValueBlock = (function(r) {
              function s(t) {
                o(this, s);
                var e = n(
                  this,
                  (s.__proto__ || Object.getPrototypeOf(s)).call(this, t)
                );
                return (e._outputs = []), e;
              }
              return (
                i(s, l.InsertFieldValueBlock),
                e(s, [
                  {
                    key: 'output',
                    value: function(t) {
                      var e = this;
                      'string' == typeof t
                        ? this._outputs.push(
                            'INSERTED.' + this._sanitizeField(t)
                          )
                        : t.forEach(function(t) {
                            e._outputs.push('INSERTED.' + e._sanitizeField(t));
                          });
                    }
                  },
                  {
                    key: '_toParamString',
                    value: function(e) {
                      var r = t(
                        s.prototype.__proto__ ||
                          Object.getPrototypeOf(s.prototype),
                        '_toParamString',
                        this
                      ).call(this, e);
                      if (r.text.length && 0 < this._outputs.length) {
                        var n = 'OUTPUT ' + this._outputs.join(', ') + ' ',
                          i = r.text.indexOf('VALUES');
                        r.text = r.text.substr(0, i) + n + r.text.substr(i);
                      }
                      return r;
                    }
                  }
                ]),
                s
              );
            })()),
            (l.MssqlUpdateDeleteOutputBlock = (function(t) {
              function r(t) {
                o(this, r);
                var e = n(
                  this,
                  (r.__proto__ || Object.getPrototypeOf(r)).call(this, t)
                );
                return (e._outputs = []), e;
              }
              return (
                i(r, l.Block),
                e(r, [
                  {
                    key: 'outputs',
                    value: function(t) {
                      for (var e in t) this.output(e, t[e]);
                    }
                  },
                  {
                    key: 'output',
                    value: function(t) {
                      var e =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : null;
                      (t = this._sanitizeField(t)),
                        (e = e ? this._sanitizeFieldAlias(e) : e),
                        this._outputs.push({
                          name: this.options.forDelete
                            ? 'DELETED.' + t
                            : 'INSERTED.' + t,
                          alias: e
                        });
                    }
                  },
                  {
                    key: '_toParamString',
                    value: function(t) {
                      var e = '';
                      if (this._outputs.length) {
                        var r = !0,
                          n = !1,
                          i = void 0;
                        try {
                          for (
                            var o, a = this._outputs[Symbol.iterator]();
                            !(r = (o = a.next()).done);
                            r = !0
                          ) {
                            var l = o.value;
                            (e = s(e, ', ')),
                              (e += l.name),
                              l.alias &&
                                (e += ' AS ' + this._formatFieldAlias(l.alias));
                          }
                        } catch (t) {
                          (n = !0), (i = t);
                        } finally {
                          try {
                            !r && a.return && a.return();
                          } finally {
                            if (n) throw i;
                          }
                        }
                        e = 'OUTPUT ' + e;
                      }
                      return { text: e, values: [] };
                    }
                  }
                ]),
                r
              );
            })()),
            (l.Select = (function(t) {
              function e(t) {
                var r =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : null;
                o(this, e);
                var i = new l.MssqlLimitOffsetTopBlock(t);
                return (
                  (r = r || [
                    new l.StringBlock(t, 'SELECT'),
                    new l.DistinctBlock(t),
                    i.TOP(),
                    new l.GetFieldBlock(t),
                    new l.FromTableBlock(t),
                    new l.JoinBlock(t),
                    new l.WhereBlock(t),
                    new l.GroupByBlock(t),
                    new l.OrderByBlock(t),
                    i.OFFSET(),
                    i.LIMIT(),
                    new l.UnionBlock(t)
                  ]),
                  n(
                    this,
                    (e.__proto__ || Object.getPrototypeOf(e)).call(this, t, r)
                  )
                );
              }
              return i(e, l.QueryBuilder), e;
            })()),
            (l.Update = (function(t) {
              function e(t) {
                var r =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : null;
                return (
                  o(this, e),
                  (r = r || [
                    new l.StringBlock(t, 'UPDATE'),
                    new l.MssqlUpdateTopBlock(t),
                    new l.UpdateTableBlock(t),
                    new l.SetFieldBlock(t),
                    new l.MssqlUpdateDeleteOutputBlock(t),
                    new l.WhereBlock(t)
                  ]),
                  n(
                    this,
                    (e.__proto__ || Object.getPrototypeOf(e)).call(this, t, r)
                  )
                );
              }
              return i(e, l.QueryBuilder), e;
            })()),
            (l.Delete = (function(t) {
              function e(t) {
                var r =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : null;
                return (
                  o(this, e),
                  (r = r || [
                    new l.StringBlock(t, 'DELETE'),
                    new l.TargetTableBlock(t),
                    new l.FromTableBlock(a({}, t, { singleTable: !0 })),
                    new l.JoinBlock(t),
                    new l.MssqlUpdateDeleteOutputBlock(
                      a({}, t, { forDelete: !0 })
                    ),
                    new l.WhereBlock(t),
                    new l.OrderByBlock(t),
                    new l.LimitBlock(t)
                  ]),
                  n(
                    this,
                    (e.__proto__ || Object.getPrototypeOf(e)).call(this, t, r)
                  )
                );
              }
              return i(e, l.QueryBuilder), e;
            })()),
            (l.Insert = (function(t) {
              function e(t) {
                var r =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : null;
                return (
                  o(this, e),
                  (r = r || [
                    new l.StringBlock(t, 'INSERT'),
                    new l.IntoTableBlock(t),
                    new l.MssqlInsertFieldValueBlock(t),
                    new l.InsertFieldsFromQueryBlock(t)
                  ]),
                  n(
                    this,
                    (e.__proto__ || Object.getPrototypeOf(e)).call(this, t, r)
                  )
                );
              }
              return i(e, l.QueryBuilder), e;
            })());
        }),
        (p.flavours.mysql = function(t) {
          var r = t.cls;
          (r.MysqlOnDuplicateKeyUpdateBlock = (function(t) {
            function a() {
              return (
                o(this, a),
                n(
                  this,
                  (a.__proto__ || Object.getPrototypeOf(a)).apply(
                    this,
                    arguments
                  )
                )
              );
            }
            return (
              i(a, r.AbstractSetFieldBlock),
              e(a, [
                {
                  key: 'onDupUpdate',
                  value: function(t, e, r) {
                    this._set(t, e, r);
                  }
                },
                {
                  key: '_toParamString',
                  value: function() {
                    for (
                      var t =
                          arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : {},
                        e = '',
                        r = [],
                        n = 0;
                      n < this._fields.length;
                      ++n
                    ) {
                      e = s(e, ', ');
                      var i = this._fields[n],
                        o = this._values[0][n],
                        a = this._valueOptions[0][n];
                      if (void 0 === o) e += i;
                      else {
                        var l = this._buildString(
                          i + ' = ' + this.options.parameterCharacter,
                          [o],
                          {
                            buildParameterized: t.buildParameterized,
                            formattingOptions: a
                          }
                        );
                        (e += l.text),
                          l.values.forEach(function(t) {
                            return r.push(t);
                          });
                      }
                    }
                    return {
                      text: e.length ? 'ON DUPLICATE KEY UPDATE ' + e : '',
                      values: r
                    };
                  }
                }
              ]),
              a
            );
          })()),
            (r.Insert = (function(t) {
              function e(t) {
                var i =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : null;
                return (
                  o(this, e),
                  (i = i || [
                    new r.StringBlock(t, 'INSERT'),
                    new r.IntoTableBlock(t),
                    new r.InsertFieldValueBlock(t),
                    new r.InsertFieldsFromQueryBlock(t),
                    new r.MysqlOnDuplicateKeyUpdateBlock(t)
                  ]),
                  n(
                    this,
                    (e.__proto__ || Object.getPrototypeOf(e)).call(this, t, i)
                  )
                );
              }
              return i(e, r.QueryBuilder), e;
            })()),
            (r.Replace = (function(t) {
              function e(t) {
                var i =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : null;
                return (
                  o(this, e),
                  (i = i || [
                    new r.StringBlock(t, 'REPLACE'),
                    new r.IntoTableBlock(t),
                    new r.InsertFieldValueBlock(t),
                    new r.InsertFieldsFromQueryBlock(t)
                  ]),
                  n(
                    this,
                    (e.__proto__ || Object.getPrototypeOf(e)).call(this, t, i)
                  )
                );
              }
              return i(e, r.QueryBuilder), e;
            })()),
            (t.replace = function(t, e) {
              return new r.Replace(t, e);
            });
        }),
        (p.flavours.postgres = function(t) {
          var r = t.cls;
          (r.DefaultQueryBuilderOptions.numberedParameters = !0),
            (r.DefaultQueryBuilderOptions.numberedParametersStartAt = 1),
            (r.DefaultQueryBuilderOptions.autoQuoteAliasNames = !1),
            (r.DefaultQueryBuilderOptions.useAsForTableAliasNames = !0),
            (r.PostgresOnConflictKeyUpdateBlock = (function(t) {
              function a() {
                return (
                  o(this, a),
                  n(
                    this,
                    (a.__proto__ || Object.getPrototypeOf(a)).apply(
                      this,
                      arguments
                    )
                  )
                );
              }
              return (
                i(a, r.AbstractSetFieldBlock),
                e(a, [
                  {
                    key: 'onConflict',
                    value: function(t, e) {
                      var r = this;
                      (this._onConflict = !0),
                        t &&
                          (u(t) || (t = [t]),
                          (this._dupFields = t.map(
                            this._sanitizeField.bind(this)
                          )),
                          e &&
                            Object.keys(e).forEach(function(t) {
                              r._set(t, e[t]);
                            }));
                    }
                  },
                  {
                    key: '_toParamString',
                    value: function() {
                      for (
                        var t =
                            arguments.length > 0 && void 0 !== arguments[0]
                              ? arguments[0]
                              : {},
                          e = '',
                          r = [],
                          n = 0;
                        n < this._fields.length;
                        ++n
                      ) {
                        e = s(e, ', ');
                        var i = this._fields[n],
                          o = this._values[0][n],
                          a = this._valueOptions[0][n];
                        if (void 0 === o) e += i;
                        else {
                          var l = this._buildString(
                            i + ' = ' + this.options.parameterCharacter,
                            [o],
                            {
                              buildParameterized: t.buildParameterized,
                              formattingOptions: a
                            }
                          );
                          (e += l.text),
                            l.values.forEach(function(t) {
                              return r.push(t);
                            });
                        }
                      }
                      var u = { text: '', values: r };
                      if (this._onConflict) {
                        var c = this._dupFields
                            ? '(' + this._dupFields.join(', ') + ') '
                            : '',
                          h = e.length ? 'UPDATE SET ' + e : 'NOTHING';
                        u.text = 'ON CONFLICT ' + c + 'DO ' + h;
                      }
                      return u;
                    }
                  }
                ]),
                a
              );
            })()),
            (r.ReturningBlock = (function(t) {
              function a(t) {
                o(this, a);
                var e = n(
                  this,
                  (a.__proto__ || Object.getPrototypeOf(a)).call(this, t)
                );
                return (e._fields = []), e;
              }
              return (
                i(a, r.Block),
                e(a, [
                  {
                    key: 'returning',
                    value: function(t) {
                      var e =
                          arguments.length > 1 && void 0 !== arguments[1]
                            ? arguments[1]
                            : null,
                        r =
                          arguments.length > 2 && void 0 !== arguments[2]
                            ? arguments[2]
                            : {};
                      if (
                        ((e = e ? this._sanitizeFieldAlias(e) : e),
                        (t = this._sanitizeField(t)),
                        this._fields.filter(function(r) {
                          return r.name === t && r.alias === e;
                        }).length)
                      )
                        return this;
                      this._fields.push({ name: t, alias: e, options: r });
                    }
                  },
                  {
                    key: '_toParamString',
                    value: function() {
                      var t =
                          arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : {},
                        e = (t.queryBuilder, t.buildParameterized),
                        r = '',
                        n = [],
                        i = !0,
                        o = !1,
                        a = void 0;
                      try {
                        for (
                          var l, u = this._fields[Symbol.iterator]();
                          !(i = (l = u.next()).done);
                          i = !0
                        ) {
                          var c = l.value;
                          r = s(r, ', ');
                          var h = c.name,
                            f = c.alias,
                            d = c.options;
                          if ('string' == typeof h)
                            r += this._formatFieldName(h, d);
                          else {
                            var p = h._toParamString({
                              nested: !0,
                              buildParameterized: e
                            });
                            (r += p.text),
                              p.values.forEach(function(t) {
                                return n.push(t);
                              });
                          }
                          f && (r += ' AS ' + this._formatFieldAlias(f));
                        }
                      } catch (t) {
                        (o = !0), (a = t);
                      } finally {
                        try {
                          !i && u.return && u.return();
                        } finally {
                          if (o) throw a;
                        }
                      }
                      return {
                        text: r.length > 0 ? 'RETURNING ' + r : '',
                        values: n
                      };
                    }
                  }
                ]),
                a
              );
            })()),
            (r.WithBlock = (function(t) {
              function s(t) {
                o(this, s);
                var e = n(
                  this,
                  (s.__proto__ || Object.getPrototypeOf(s)).call(this, t)
                );
                return (e._tables = []), e;
              }
              return (
                i(s, r.Block),
                e(s, [
                  {
                    key: 'with',
                    value: function(t, e) {
                      this._tables.push({ alias: t, table: e });
                    }
                  },
                  {
                    key: '_toParamString',
                    value: function() {
                      var t =
                          arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : {},
                        e = [],
                        r = [],
                        n = !0,
                        i = !1,
                        o = void 0;
                      try {
                        for (
                          var s, a = this._tables[Symbol.iterator]();
                          !(n = (s = a.next()).done);
                          n = !0
                        ) {
                          var l = s.value,
                            u = l.alias,
                            c = l.table._toParamString({
                              buildParameterized: t.buildParameterized,
                              nested: !0
                            });
                          e.push(u + ' AS ' + c.text),
                            c.values.forEach(function(t) {
                              return r.push(t);
                            });
                        }
                      } catch (t) {
                        (i = !0), (o = t);
                      } finally {
                        try {
                          !n && a.return && a.return();
                        } finally {
                          if (i) throw o;
                        }
                      }
                      return {
                        text: e.length ? 'WITH ' + e.join(', ') : '',
                        values: r
                      };
                    }
                  }
                ]),
                s
              );
            })()),
            (r.DistinctOnBlock = (function(t) {
              function s(t) {
                o(this, s);
                var e = n(
                  this,
                  (s.__proto__ || Object.getPrototypeOf(s)).call(this, t)
                );
                return (e._distinctFields = []), e;
              }
              return (
                i(s, r.Block),
                e(s, [
                  {
                    key: 'distinct',
                    value: function() {
                      var t = this;
                      this._useDistinct = !0;
                      for (
                        var e = arguments.length, r = Array(e), n = 0;
                        n < e;
                        n++
                      )
                        r[n] = arguments[n];
                      r.forEach(function(e) {
                        t._distinctFields.push(t._sanitizeField(e));
                      });
                    }
                  },
                  {
                    key: '_toParamString',
                    value: function() {
                      var t = '';
                      return (
                        this._useDistinct &&
                          ((t = 'DISTINCT'),
                          this._distinctFields.length &&
                            (t +=
                              ' ON (' + this._distinctFields.join(', ') + ')')),
                        { text: t, values: [] }
                      );
                    }
                  }
                ]),
                s
              );
            })()),
            (r.Select = (function(t) {
              function e(t) {
                var i =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : null;
                return (
                  o(this, e),
                  (i = i || [
                    new r.WithBlock(t),
                    new r.StringBlock(t, 'SELECT'),
                    new r.FunctionBlock(t),
                    new r.DistinctOnBlock(t),
                    new r.GetFieldBlock(t),
                    new r.FromTableBlock(t),
                    new r.JoinBlock(t),
                    new r.WhereBlock(t),
                    new r.GroupByBlock(t),
                    new r.HavingBlock(t),
                    new r.OrderByBlock(t),
                    new r.LimitBlock(t),
                    new r.OffsetBlock(t),
                    new r.UnionBlock(t)
                  ]),
                  n(
                    this,
                    (e.__proto__ || Object.getPrototypeOf(e)).call(this, t, i)
                  )
                );
              }
              return i(e, r.QueryBuilder), e;
            })()),
            (r.Insert = (function(t) {
              function e(t) {
                var i =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : null;
                return (
                  o(this, e),
                  (i = i || [
                    new r.WithBlock(t),
                    new r.StringBlock(t, 'INSERT'),
                    new r.IntoTableBlock(t),
                    new r.InsertFieldValueBlock(t),
                    new r.InsertFieldsFromQueryBlock(t),
                    new r.PostgresOnConflictKeyUpdateBlock(t),
                    new r.ReturningBlock(t)
                  ]),
                  n(
                    this,
                    (e.__proto__ || Object.getPrototypeOf(e)).call(this, t, i)
                  )
                );
              }
              return i(e, r.QueryBuilder), e;
            })()),
            (r.Update = (function(t) {
              function e(t) {
                var i =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : null;
                return (
                  o(this, e),
                  (i = i || [
                    new r.WithBlock(t),
                    new r.StringBlock(t, 'UPDATE'),
                    new r.UpdateTableBlock(t),
                    new r.SetFieldBlock(t),
                    new r.FromTableBlock(t),
                    new r.WhereBlock(t),
                    new r.OrderByBlock(t),
                    new r.LimitBlock(t),
                    new r.ReturningBlock(t)
                  ]),
                  n(
                    this,
                    (e.__proto__ || Object.getPrototypeOf(e)).call(this, t, i)
                  )
                );
              }
              return i(e, r.QueryBuilder), e;
            })()),
            (r.Delete = (function(t) {
              function e(t) {
                var i =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : null;
                return (
                  o(this, e),
                  (i = i || [
                    new r.WithBlock(t),
                    new r.StringBlock(t, 'DELETE'),
                    new r.TargetTableBlock(t),
                    new r.FromTableBlock(a({}, t, { singleTable: !0 })),
                    new r.JoinBlock(t),
                    new r.WhereBlock(t),
                    new r.OrderByBlock(t),
                    new r.LimitBlock(t),
                    new r.ReturningBlock(t)
                  ]),
                  n(
                    this,
                    (e.__proto__ || Object.getPrototypeOf(e)).call(this, t, i)
                  )
                );
              }
              return i(e, r.QueryBuilder), e;
            })());
        }),
        p
      );
    }),
      (t.exports = r());
  }),
  QueryBuilder = t => squel.useFlavour(t || 'mysql');
class Processor {
  constructor(t) {
    if (void 0 === t)
      throw new Error(
        'A QueryBuilder object is required to initialize a Processor'
      );
    this._qb = t;
  }
  process(t, e, r, n) {
    throw new Error('No process() method implemented for this class');
  }
}
function resolveVariable(t, e) {
  const r = e[t];
  if (void 0 === r) throw new Error(`Could not find variable: ${t}`);
  return r.value;
}
const getFieldValue = (t, e, r) =>
  null !== t ? (void 0 !== r[e.value] ? e.alias : `${t}.${e.value}`) : e.value;
class FilterString {
  _handleQueryCall(t, e, r, n) {
    const i = t.filter(t => 'QUERY' === t.type && t.name === e.name)[0];
    if (void 0 === i) {
      let t = [];
      return (
        e.params.forEach(e => {
          e.type && e.type === Nodes.VARIABLE
            ? t.push(resolveVariable(e.value, r))
            : e.type === Nodes.BOOLEAN
              ? t.push(e.value.toString().toUpperCase())
              : e.type === Nodes.LONG_TEXT
                ? t.push(`'${e.value}'`)
                : t.push(e.value);
        }),
        { text: `${e.name}(${t.join(', ')})`, variables: [] }
      );
    }
    const o = {};
    return (
      i.variables.forEach((t, n) => {
        const i = e.params[n];
        i.type === Nodes.VARIABLE
          ? (o[t.name] = resolveVariable(i.value, r))
          : (o[t.name] = i.value);
      }),
      {
        text: '?',
        variables: [QueryProcessor$1(n).process(t, i, { variables: o })]
      }
    );
  }
  _handleOperation(t, e, r, n, i, o) {
    const s = r.a,
      a = r.op,
      l = r.b,
      u = this._buildString(t, e, s, n, !0, i, o),
      c = this._buildString(t, null, l, n, !1, i, o);
    return {
      text: `${u.text} ${a} ${c.text}`,
      variables: [...u.variables, ...c.variables]
    };
  }
  _buildString(t, e, r, n, i, o, s) {
    let a = null;
    switch (r.type) {
      case Nodes.OPERATION:
        a = this._handleOperation(t, e, r, n, o, s);
        break;
      case Nodes.VARIABLE:
        a = this._handleVariable(r, n);
        break;
      case Nodes.BUILT_IN:
        a = this._handleBuiltIn(r);
        break;
      case Nodes.QUERY_CALL:
        a = this._handleQueryCall(t, r, n, s);
        break;
      case Nodes.ARRAY:
        a = this._handleArray(t, r, n, s);
        break;
      case Nodes.RAW_TEXT:
        a = this._handleLeftSide(e, r, o);
        break;
      default:
        a = i ? this._handleLeftSide(e, r, o) : this._handleText(e, r, o);
    }
    return a;
  }
  constructor(t, e, r, n, i, o) {
    _initialiseProps.call(this),
      (this._string = this._buildString(t, e, r, n, !1, i || {}, o));
  }
}
var _initialiseProps = function() {
    (this._handleText = (t, e, r) => ({
      text: '?',
      variables: [getFieldValue(t, e, r)]
    })),
      (this._handleLeftSide = (t, e, r) => ({
        text: getFieldValue(t, e, r),
        variables: []
      })),
      (this._handleArray = (t, e, r, n) => {
        let i = [];
        return (
          e.value.forEach(e => {
            switch (e.type) {
              case Nodes.QUERY_CALL:
                i = [...i, this._handleQueryCall(t, e, r, n).variables];
                break;
              case Nodes.VARIABLE:
                i = [...i, ...this._handleVariable(e, r).variables];
                break;
              default:
                i.push(e.value);
            }
          }),
          { text: `(${e.value.map(t => '?').join(', ')})`, variables: i }
        );
      }),
      (this._handleBuiltIn = t => ({ text: t.value, variables: [] })),
      (this._handleVariable = (t, e) => ({
        text: '?',
        variables: [resolveVariable(t.value, e)]
      })),
      (this.toString = () => this._string);
  },
  _extends =
    Object.assign ||
    function(t) {
      for (var e = 1; e < arguments.length; e++) {
        var r = arguments[e];
        for (var n in r)
          Object.prototype.hasOwnProperty.call(r, n) && (t[n] = r[n]);
      }
      return t;
    },
  objectWithoutProperties = function(t, e) {
    var r = {};
    for (var n in t)
      e.indexOf(n) >= 0 ||
        (Object.prototype.hasOwnProperty.call(t, n) && (r[n] = t[n]));
    return r;
  };
class Helpers {
  static getFieldsFromNode(t) {
    const e = t.type,
      r = t.table,
      n = t.name;
    return t.nodes
      .filter(t => t.type === Nodes.FIELD)
      .map(t =>
        _extends({}, t, {
          name: e === Nodes.JOIN ? `${r}.${t.name}` : `${n}.${t.name}`
        })
      );
  }
  static getFieldsFromOperationString(t, e, r) {
    if (t.type === Nodes.OPERATION) {
      const n = t.a;
      return (r = [...r, ...this.getFieldsFromOperationString(n, e, r)]);
    }
    return t.type === Nodes.VARIABLE ? [e[t]] : [t];
  }
  static buildFilterString(t, e, r, n, i, o) {
    return new FilterString(t, e, r, n, i, o).toString();
  }
  static applyWhereStatement(t, e, r, n) {
    const i = e.params.map(e =>
      Helpers.buildFilterString(t, null, e, r, [], n.flavour)
    );
    i.length > 0 &&
      (n = n.where(
        i.map(t => t.text).join(' AND '),
        ...i.map(t => t.variables).reduce((t, e) => t.concat(e))
      ));
  }
  static interpolateVariables(t, e) {
    const r = /(\s+\?\s+)|(^\?\s+)|(\s+\?$)/g;
    let n = 0,
      i = 0,
      o = '',
      s = r.exec(t);
    for (; null !== s; ) {
      let a = e[n];
      if (void 0 === a)
        throw new Error('Missing variable. Cannot interpolate.');
      (o += `${t.substring(i, s.index)} ${a}`),
        (i = s.index + (0 === s.index ? 1 : 2)),
        n++,
        (s = r.exec(t));
    }
    return (o += t.substring(i, t.length));
  }
}
class JoinProcessor extends Processor {
  _applyFields(t, e, r) {
    e.forEach(e => {
      e.alias
        ? r.includes(e.alias)
          ? t.field(e.alias)
          : (t.field(e.name, e.alias), r.push(e.alias))
        : t.field(e.name);
    });
  }
  _getOnString(t, e, r, n) {
    const i = Helpers.buildFilterString(
      t,
      e.table,
      e.on[0],
      r,
      n,
      this._qb.flavour
    );
    return Helpers.interpolateVariables(i.text, i.variables);
  }
  _addSelectors(t, e, r, n) {
    const i = e.on.slice(1);
    Helpers.applyWhereStatement(t, { params: i }, r, n);
  }
  _addAllFieldsAndJoins(t, e, r, n, i) {
    const o = e.table,
      s = e.on,
      a = Helpers.getFieldsFromNode(e),
      l = this._getAllSubjoins(t, e, r, n),
      u =
        l.length > 0 ? l.map(t => t.fields).reduce((t, e) => t.concat(e)) : [];
    a.forEach(t => {
      if (t.value)
        throw new Error(
          'Values cannot be assigned to fields in a query document'
        );
      i.field(t.name);
    }),
      null == i.field && console.log('fuck'),
      l.forEach(t => this._applyFields(i, t.fields, n));
    const c = a.map(t => t.value);
    return (
      Helpers.getFieldsFromOperationString(s[0], r, []).forEach(t => {
        const e = `${o}.${t.value}`;
        c.includes(e) || i.field(e);
      }),
      l.forEach(t => i.join(t.qb, t.table, t.on)),
      [...a, ...u]
    );
  }
  _getAllSubjoins(t, e, r, n) {
    const i = [];
    return (
      e.nodes.filter(t => t.type === Nodes.JOIN).forEach(e => {
        i.push(this._processJoin(t, e, r, n));
      }),
      i
    );
  }
  _processJoin(t, e, r, n) {
    const i = e.table,
      o = this._qb.select().from(i),
      s = this._getOnString(t, e, r, n);
    return (
      this._addSelectors(t, e, r, o),
      {
        qb: o,
        table: i,
        fields: this._addAllFieldsAndJoins(t, e, r, n, o),
        on: s
      }
    );
  }
  process(t, e, r, n) {
    const i = [],
      o = e.nodes
        .filter(t => t.type === Nodes.JOIN)
        .map(e => this._processJoin(t, e, r, i));
    return (
      null != n.field && o.forEach(t => this._applyFields(n, t.fields, i)),
      o.forEach(t => n.join(t.qb, t.table, t.on)),
      n
    );
  }
}
var JoinProcessor$1 = t => new JoinProcessor(t);
class QueryProcessor extends Processor {
  _addTableFields(t, e) {
    Helpers.getFieldsFromNode(t).forEach(t => {
      if (t.value)
        throw new Error(
          'Values cannot be assigned to fields in a query document'
        );
      t.alias ? e.field(t.name, t.alias) : e.field(t.name);
    });
  }
  _addConfigOptions(t, e) {
    const r = t.orderBy,
      n = t.descending,
      i = t.groupBy,
      o = t.limit,
      s = t.offset,
      a = t => void 0 !== t && null !== t;
    a(i) && e.group(i),
      a(r) && e.order(r, !n),
      a(s) && e.offset(s),
      a(o) && e.limit(o);
  }
  _processTable(t, e, r, n) {
    const i = e.name;
    if (e.delete) throw new Error('Queries cannot contain delete statements');
    {
      let o = this._qb.select().from(i);
      return (
        this._addTableFields(e, o),
        (o = JoinProcessor$1(this._qb).process(t, e, r, o)),
        Helpers.applyWhereStatement(t, e, r, o),
        this._addConfigOptions(n, o),
        o
      );
    }
  }
  process(t, e, r, n = this._qb) {
    const i = e.variables,
      o = e.nodes;
    let s = r.variables,
      a = objectWithoutProperties(r, ['variables']);
    if (((s = Object.assign({}, s)), e.type !== Nodes.QUERY))
      throw new Error(
        'Only a query document node can be passed to a QueryProcessor'
      );
    i.forEach(t => {
      if (s && s.hasOwnProperty(t.name))
        s[t.name] = { value: s[t.name], required: t.required };
      else if (t.required)
        throw new Error(`Missing required variable ${t.name}`);
    });
    const l = o.filter(t => t.type === Nodes.TABLE);
    if (l.length < 1) throw new Error('Query must contain at least one table');
    return (
      l.forEach(e => {
        n = this._processTable(t, e, s || {}, a);
      }),
      n
    );
  }
}
var QueryProcessor$1 = t => new QueryProcessor(QueryBuilder(t));
class MutationProcessor extends Processor {
  _addTableFields(t, e, r) {
    let n = 0;
    if (
      (t.nodes.filter(t => t.type === Nodes.FIELD).forEach(t => {
        this._verifyField(t);
        try {
          switch (t.value.type) {
            case Nodes.VARIABLE:
              const i = t.value.value,
                o = e[i];
              void 0 !== o && (r.set(t.name, o.value), n++);
              break;
            case Nodes.RAW_TEXT:
              r.set(t.name, this._qb.str(t.value.value)), n++;
              break;
            default:
              r.set(t.name, t.value.value), n++;
          }
        } catch (e) {
          console.error(
            `Value \`${t.value.value}\` for field \`${t.name}\` is invalid`
          );
        }
      }),
      0 === n)
    )
      throw new Error('At least one field must be set in a mutation');
  }
  _verifyField(t) {
    if (t.alias) throw new Error('Aliases not allowed in mutations');
    if (null === t.value)
      throw new Error(`Value required for field '${t.name}'`);
    return !0;
  }
  _processInsert(t, e, r, n) {
    const i = e.name,
      o = n.returning;
    let s = this._qb.insert().into(i);
    return this._addTableFields(e, r, s), o && s.returning(o), s;
  }
  _processUpdate(t, e, r, n) {
    const i = e.name,
      o = n.descending,
      s = n.orderBy,
      a = n.returning,
      l = n.limit;
    let u = this._qb.update().table(i);
    return (
      this._addTableFields(e, r, u),
      Helpers.applyWhereStatement(t, e, r, u),
      void 0 !== s && null !== s && u.order(s, !o),
      void 0 !== l && null !== l && u.limit(l),
      void 0 !== a && null !== a && u.returning(a),
      u
    );
  }
  _processDelete(t, e, r, n) {
    const i = e.params,
      o = e.nodes,
      s = e.name,
      a = n.orderBy,
      l = n.limit,
      u = n.returning,
      c = n.descending;
    if (0 === i.length)
      throw new Error(
        'A selector statement is required for all delete statements'
      );
    if (o.filter(t => t.type === Nodes.FIELD).length > 0)
      throw new Error('Fields are not allowed in delete statements');
    {
      let n = this._qb.delete().from(s);
      return (
        (n = JoinProcessor$1(this._qb).process(t, e, r, n)),
        Helpers.applyWhereStatement(t, e, r, n),
        void 0 !== a && null !== a && n.order(a, !c),
        void 0 !== l && null !== l && n.limit(l),
        void 0 !== u && null !== u && n.returning(u),
        n
      );
    }
  }
  _processTable(t, e, r, n) {
    const i = e.params,
      o = e.nodes;
    let s;
    if (e.delete) s = this._processDelete(t, e, r, n);
    else {
      if (o.filter(t => t.type === Nodes.JOIN).length > 0)
        throw new Error('Join statements are not allowed in mutations');
      s =
        i.length > 0
          ? this._processUpdate(t, e, r, n)
          : this._processInsert(t, e, r, n);
    }
    return s;
  }
  process(t, e, r, n = this._qb) {
    const i = e.variables,
      o = e.nodes;
    let s = r.variables,
      a = objectWithoutProperties(r, ['variables']);
    if (((s = Object.assign({}, s)), e.type !== Nodes.MUTATION))
      throw new Error(
        'Only a mutation document node can be passed to a MutationProcessor'
      );
    i.forEach(t => {
      if (s && s.hasOwnProperty(t.name))
        s[t.name] = { value: s[t.name], required: t.required };
      else if (t.required)
        throw new Error(`Missing required variable ${t.name}`);
    });
    const l = o.filter(t => t.type === Nodes.TABLE);
    if (l.length < 1)
      throw new Error('Mutations must contain at least one table');
    return (
      l.forEach(e => {
        n = this._processTable(t, e, s || {}, a);
      }),
      n
    );
  }
}
var MutationProcessor$1 = t => new MutationProcessor(QueryBuilder(t));
const getFunctionArgs = t => {
    let e = null,
      r = {},
      n = !1;
    switch (t.length) {
      case 1:
        r = t[0];
        break;
      case 2:
        'string' == typeof t[0]
          ? ((e = t[0]), (r = t[1]))
          : ((r = t[0]), (n = t[1]));
        break;
      case 3:
        (e = t[0]), (r = t[1]), (n = t[2]);
    }
    return { name: e, config: r, as_string: n };
  },
  getEntryPoint = (t, e) => {
    const r = t.name,
      n = null !== r ? e.findIndex(t => t.name === r) : e.length - 1;
    if (null !== r && n < 0)
      throw new Error(`Could not find document \`${r}\``);
    return e[n];
  },
  getProcessedDocument = (t, e, r, n) => {
    let i = n.config,
      o = n.as_string,
      s = null;
    switch (t.type) {
      case Nodes.QUERY:
        s = QueryProcessor$1(r).process(e, t, i);
        break;
      case Nodes.MUTATION:
        s = MutationProcessor$1(r).process(e, t, i);
        break;
      default:
        throw new Error('Unrecognized document type');
    }
    if (null !== s) return o ? s.toString() : s.toParam();
    throw new Error('An error occurred processing the document');
  },
  getFunction = (t, e) =>
    function() {
      const r = getFunctionArgs(Array.from(arguments)),
        n = getEntryPoint(r, e);
      return getProcessedDocument(n, e, t, r);
    },
  dql = t =>
    function(e) {
      const r = Array.from(arguments);
      if (
        1 === r.length &&
        r[0].length > 0 &&
        'object' == typeof r[0][0] &&
        r[0][0].hasOwnProperty('type')
      )
        return getFunction(t, e);
      const n = r[0];
      let i = 'string' == typeof n ? n : n[0];
      for (let t = 1; t < r.length; t++) (i += r[t]), (i += n[t]);
      const o = parser_1.parse(i);
      return getFunction(t, o);
    },
  postgres = dql('postgres'),
  mysql = dql('mysql'),
  mssql = dql('mssql');
(exports.postgres = postgres),
  (exports.mysql = mysql),
  (exports.mssql = mssql),
  (exports.parser = parser_1);
