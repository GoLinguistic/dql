---
###########
# QUERIES #
###########

# Empty Queries
# =============
- name: empty query
  document: |
    query getBookmarksForUser { }

# Select All
# ==========
- name: select all
  expected: SELECT * FROM users
  document: |
    query getBookmarksForUser {
      users { }
    }

# Selection with Fields
# =====================
- name: select with fields
  expected: SELECT users.id, users.name FROM users
  document: |
    query getBookmarksForUser {
      users {
        id
        name
      }
    }

# Selection with Aliased Fields
# =============================
- name: select with fields
  expected: >
    SELECT users.id AS user_id,
           users.name AS user_name
    FROM users
  document: |
    query getUsers {
      users {
        id[user_id]
        name[user_name]
      }
    }

# Selection with a WHICH statement
# ================================
- name: select with which statement
  expected: SELECT * FROM users WHERE (id = 3)
  document: |
    query getBookmarksForUser {
      users(id = 3) { }
    }

# Selection with a WHICH Statement That Uses a Variable
# =====================================================
- name: select with which statement (variable)
  expected: SELECT * FROM users WHERE (id = 3)
  config:
    variables:
      user_id: 3
  document: |
    query getBookmarksForUser($user_id) {
      users(id = $user_id) { }
    }

# Selection with a neighboring query call
# =======================================
- name: select with a query call
  expected: SELECT users.name FROM users WHERE (id = (SELECT users.id FROM users WHERE (id = 3)))
  document: |
    query getUserID() {
      users(id = 3) {
        id
      }
    }

    query getBookmarksForUser {
      users(id = getUserID()) {
        name
      }
    }

# Selection with a Built-In Function Call #1
# ==========================================
- name: select with a built-in function call (1)
  expected: SELECT users.name FROM users WHERE (created = CURRENT_TIMESTAMP - INTERVAL '1 week')
  document: |
    query getBookmarksForUser {
      users(created = CURRENT_TIMESTAMP - INTERVAL '1 week') {
        name
      }
    }

# Selection with a Built-In Function Call #2
# ==========================================
- name: select with a built-in function call (2)
  expected: SELECT users.name FROM users WHERE (created = NOW())
  document: |
    query getBookmarksForUser {
      users(created = NOW()) {
        name
      }
    }

# Selection with a Built-In Constant
# ==================================
- name: select with a built-in constant
  expected: SELECT users.name FROM users WHERE (created < CURRENT_TIMESTAMP)
  document: |
    query getBookmarksForUser {
      users(created < CURRENT_TIMESTAMP) {
        name
      }
    }

# Selection with a Selector Constant
# ==================================
- name: select with a selector constant
  expected: SELECT users.name FROM users WHERE (name = 'Tyler')
  document: |
    query getBookmarksForUser {
      users(name = "Tyler") {
        name
      }
    }

# Selection with a Single Aliased JOIN
# ====================================
- name: select with simple aliased join
  expected: >
    SELECT bookmarks.name AS bookmark_name
    FROM users
        INNER JOIN (SELECT
                      bookmarks.name,
                      bookmarks.user_id
                    FROM bookmarks) AS bookmarks ON (bookmarks.user_id = users.id)
  document: |
    query getBookmarksForUser {
      users {
        ...on bookmarks(user_id = users.id) {
          name[bookmark_name]
        }
      }
    }

# Selection with a Nested Aliased JOINs
# =====================================
- name: select with nested aliased joins
  expected: >
    SELECT
      users.name,
      bookmarks.name AS bookmark_name,
      page_number,
      chapter_name
    FROM users
      INNER JOIN (SELECT
                    bookmarks.name,
                    pages.number AS page_number,
                    chapter_name,
                    bookmarks.user_id
                  FROM bookmarks
                    INNER JOIN (SELECT
                                  pages.number,
                                  chapters.name AS chapter_name,
                                  pages.bookmark_id
                                FROM pages
                                  INNER JOIN (SELECT
                                                chapters.name,
                                                chapters.page_id
                                              FROM chapters) AS
                                             chapters ON (chapters.page_id = pages.id)) AS pages ON (pages.bookmark_id =
                                                                                                     bookmarks.id)) AS bookmarks
        ON (bookmarks.user_id = users.id)
  document: |
    query getBookmarksForUser {
      users {
        name

        ...on bookmarks(user_id = users.id) {
          name[bookmark_name]

          ...on pages(bookmark_id = bookmarks.id) {
              number[page_number]

              ...on chapters(page_id = pages.id) {
                name[chapter_name]
              }
          }
        }
      }
    }

# Limiting for Queries
# ====================
- name: limiting (queries)
  expected: >
    SELECT users.name, users.created FROM users LIMIT 1
  document: |
    query getUsers {
      users {
        name
        created
      }
    }
  config:
    limit: 1

# Offset for Queries
# ==================
- name: offset (queries)
  expected: >
    SELECT users.name, users.created FROM users OFFSET 1
  document: |
    query getUsers {
      users {
        name
        created
      }
    }
  config:
    offset: 1

# Sorting for Queries (ASC)
# =========================
- name: sorting (queries) (ascending)
  expected: >
    SELECT users.name, users.created FROM users ORDER BY created ASC
  document: |
    query getUsers {
      users {
        name
        created
      }
    }
  config:
    orderBy: created

# Sorting for Queries (DESC)
# ==========================
- name: sorting (queries) (descending)
  expected: >
    SELECT users.name, users.created FROM users ORDER BY created DESC
  document: |
    query getUsers {
      users {
        name
        created
      }
    }
  config:
    orderBy: created
    descending: true

#############
# MUTATIONS #
#############

# Inserting
# =========
- name: inserting
  expected: >
    INSERT INTO users (name, age) VALUES ('John', 45)
  document: |
    mutation getUsers {
      users {
        name: "John"
        age: 45
      }
    }

# Inserting Using Variables
# =========================
- name: inserting using variables
  expected: >
    INSERT INTO users (name, age) VALUES ('John', 45)
  document: |
    mutation getUsers($name, $age) {
      users {
        name: $name
        age: $age
      }
    }
  config:
    variables:
      name: John
      age: 45

# Inserting Using 'Returning' (Postgres Only)
# ===========================================
- name: inserting using 'returning' (Postgres only)
  expected: >
    INSERT INTO users (name, age) VALUES ('John', 45) RETURNING id
  document: |
    mutation getUsers {
      users {
        name: "John"
        age: 45
      }
    }
  config:
    returning: id

# Updating
# ========
- name: updating
  expected: >
    UPDATE users SET name = 'John', age = 45 WHERE (id = 9)
  document: |
    mutation getUsers {
      users(id = 9) {
        name: "John"
        age: 45
      }
    }

# Updating Using Variables
# ========================
- name: updating using variables
  expected: >
    UPDATE users SET name = 'John', age = 45 WHERE (id = 9)
  document: |
    mutation getUsers($id, $name, $age) {
      users(id = $id) {
        name: $name
        age: $age
      }
    }
  config:
    variables:
      id: 9
      name: John
      age: 45

# Sorting for Updating (ASC)
# ==========================
- name: sorting (mutations) (ascending)
  expected: >
    UPDATE users SET name = 'John', age = 45 WHERE (id = 9) ORDER BY created ASC
  document: |
    mutation getUsers {
      users(id = 9) {
        name: "John"
        age: 45
      }
    }
  config:
    orderBy: created

# Sorting for Updating (DESC)
# ===========================
- name: sorting (mutations) (descending)
  expected: >
    UPDATE users SET name = 'John', age = 45 WHERE (id = 9) ORDER BY created DESC
  document: |
    mutation getUsers {
      users(id = 9) {
        name: "John"
        age: 45
      }
    }
  config:
    orderBy: created
    descending: true

# Limiting for Updating
# =====================
- name: limiting (mutations)
  expected: >
    UPDATE users SET name = 'John', age = 45 WHERE (id = 9) LIMIT 1
  document: |
    mutation getUsers {
      users(id = 9) {
        name: "John"
        age: 45
      }
    }
  config:
    limit: 1

#########################
# VALUE EXPERIMENTATION #
#########################

# Query with Different Scalars
# ============================
- name: query with different scalar types
  expected: SELECT * FROM users WHERE (id = 101 AND name = 'Tyler')
  document: |
    query getBookmarksForUser {
      users(id = 101, name = "Tyler") { }
    }

# Update with Different Scalars
# =============================
- name: update with different scalar types
  expected: UPDATE users SET id = 101, name = 'Tyler', description = (NULL), created = (CURRENT_TIMESTAMP) WHERE (id = 101 AND name = 'Tyler')
  document: |
    mutation getBookmarksForUser {
      users(id = 101, name = "Tyler") {
        id: 101
        name: "Tyler"
        description: NULL
        created: CURRENT_TIMESTAMP
      }
    }

# Insert with Different Scalars
# =============================
- name: insert with different scalar types
  expected: INSERT INTO users (id, name, description, created) VALUES (101, 'Tyler', (NULL), (CURRENT_TIMESTAMP))
  document: |
    mutation getBookmarksForUser {
      users {
        id: 101
        name: "Tyler"
        description: NULL
        created: CURRENT_TIMESTAMP
      }
    }

# Query with Different Variable Scalars
# =====================================
- name: query with different scalar types
  expected: SELECT * FROM users WHERE (id = 101 AND name = 'Tyler' AND description = NULL AND available = FALSE)
  document: |
    query getBookmarksForUser($id, $name, $desc, $available) {
      users(id = $id, name = $name, description = $desc, available = $available) { }
    }
  config:
    variables:
      id: 101
      name: Tyler
      desc: null
      available: false

# Update with Different Scalars
# =============================
- name: update with different scalar types
  expected: UPDATE users SET id = 101, name = 'Tyler', description = NULL, available = FALSE WHERE (id = 101 AND name = 'Tyler')
  document: |
    mutation getBookmarksForUser($id, $name, $desc, $available) {
      users(id = $id, name = $name) {
        id: $id
        name: $name
        description: $desc
        available: $available
      }
    }
  config:
    variables:
      id: 101
      name: Tyler
      desc: null
      available: false

# Insert with Different Scalars
# =============================
- name: insert with different scalar types
  expected: INSERT INTO users (id, name, description, available) VALUES (101, 'Tyler', NULL, FALSE)
  document: |
    mutation getBookmarksForUser($id, $name, $desc, $available) {
      users {
        id: $id
        name: $name
        description: $desc
        available: $available
      }
    }
  config:
    variables:
      id: 101
      name: Tyler
      desc: null
      available: false